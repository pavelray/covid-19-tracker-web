{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","components/nav-bar/Footer.js","apis/api.covid19api.js","apis/api.covid19India.js","resources/const.js","redux/actions/index.js","components/UI/StatsSummaryCard.js","components/globalContent/GlobalStatsCard.js","resources/helper.js","components/UI/MapChart.js","components/globalContent/GlobalMap.js","components/globalContent/MostAffectedCountryCard.js","components/globalContent/GlobalStatsContainer.js","components/india-stats/IndiaStatesSummaryTable.js","components/UI/SimpleLineChart.js","components/india-stats/IndiaStatsChart.js","components/UI/SateSelectDDL.js","components/india-stats/StateDistrictTable.js","components/india-stats/StateDetails.js","components/india-stats/IndiaStatsContainer.js","App.js","redux/reducer/globalDataReducer.js","redux/reducer/indiaStatsReducer.js","redux/reducer/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","color","Footer","Layout","PageFooter","textAlign","backgroundColor","href","CopyrightTwoTone","spin","twoToneColor","Date","getFullYear","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Api","get","response","type","payload","data","Title","StatsSummaryCard","totalConfirmed","totalRecovered","totalDeaths","newConfirmed","newRecovered","newDeaths","totalActive","recoverRatePercentage","deathRatePercentage","lastUpdated","confirmed","parseInt","active","recovered","deaths","direction","level","FundTwoTone","gutter","xs","sm","md","lg","flex","formatter","end","separator","valueStyle","span","text","GlobalStatsCard","renderGlobalStatsCard","statsSummary","global","this","Component","sortByProperty","property","b","formatNumber","num","toString","replace","percentageCalculator","actual","total","Math","round","MapChart","projectionConfig","rotate","scale","data-tip","countries","length","zoom","geography","geographies","map","geo","d","find","s","code","properties","ISO_A2","key","rsmKey","values","fill","hover","outline","onMouseEnter","e","NAME","setTooltipContent","name","maxWidth","renderToolTipContent","onMouseLeave","GlobalMap","React","useState","content","setContent","MostAffectedCountryCard","renderMap","FireTwoTone","bordered","dataSource","slice","renderItem","country","Item","extra","percentage","toLowerCase","Text","minWidth","Content","GlobalStatsContainer","renderGlobalStats","renderMostAffectedCard","connect","state","bindActionCreators","IndiaStatesSummaryTable","columns","dataIndex","fixed","ellipsis","responsive","render","value","renderDeltaInfo","record","padding","deltaconfirmed","deltarecovered","deltadeaths","lastupdatedtime","statenotes","allStates","size","expandable","expandedRowRender","SimpleLineChart","orientation","field","categoryField","category","markers","visible","baseUnit","IndiaStatsChart","renderTitle","LineChartOutlined","Option","Select","SateSelectDDL","defaultValue","onChange","handleChange","states","statecode","StateDistrictTable","stateDetailsSortBy","stateDetails","sort","StateDetails","onStateChange","stateCode","fetchIndiaStateDetails","marginTop","console","log","indiaData","stateDetailsWithZones","covid19IndiaApi","filter","zoneResponse","zones","zone","IndiaStatsContainer","renderStatsSummary","summary","renderStateSummaryTable","renderStateDetails","fetchIndiaStateSummary","chatDataCategory","chartDataConfirmed","casesTimeSeriesChartDataCategory","casesTimeSeriesChartDataConfirmed","TabPane","Tabs","renderTabBar","DefaultTabBar","App","sub","minHeight","defaultActiveKey","tabPosition","tab","INITIAL_STATE","casesTimeSeriesChartData","combineReducers","action","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","toLocaleDateString","toLocaleTimeString","Countries","Country","CountryCode","slug","Slug","percentageNumber","toFixed","countriesList","count","statewise","cases_time_series","series","date","setYear","totalconfirmed","totaldeceased","totalrecovered","districtData","item","index","district","lastupdated","zoneSource","source","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9a1c9a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px' , color: 'white'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { CopyrightTwoTone  } from '@ant-design/icons';\r\nconst { Footer } = Layout;\r\n\r\nexport default function PageFooter() {\r\n  return (\r\n     <Footer style={{ textAlign: 'center', backgroundColor:'#2196f3' }}>\r\n       <p>\r\n          Developed by <a href=\"https://github.com/pavelray\" style={{color: 'black'}} >#Ray</a>\r\n       </p>\r\n       <p>\r\n          Covid-19 Tracker <CopyrightTwoTone  spin twoToneColor=\"#eb2f96\"/> &nbsp;{new Date().getFullYear()}\r\n       </p>\r\n       \r\n       {/* <p>\r\n          API Used : <a href=\"https://api.covid19api.com\" style={{color: 'black'}}>covid19api</a>&nbsp;and&nbsp; \r\n          <a href=\"https://api.covid19india.org\" style={{color: 'black'}}>covid19india</a>\r\n       </p> */}\r\n     </Footer>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19api.com'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19india.org'\r\n});\r\n","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRY_SUMMARY: 'FETCH_ALL_COUNTRY_SUMMARY',\r\n    FETCH_INDIA_STATE_SUMMARY: 'FETCH_INDIA_STATE_SUMMARY',\r\n    FETCH_INDIA_STATE_DETAILS: 'FETCH_INDIA_STATE_DETAILS',\r\n    FETCH_STATE_ZONE_DETAILS: 'FETCH_STATE_ZONE_DETAILS',\r\n}","import covid19Api from '../../apis/api.covid19api';\r\nimport covid19IndiaApi from '../../apis/api.covid19India';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchIndiaStateSummary = () => async dispatch =>{\r\n    const response = await covid19IndiaApi.get('/data.json');\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY,\r\n        payload: response.data\r\n    });\r\n}\r\n\r\nexport const fetchIndiaStateDetails = (stateCode) => async dispatch => {\r\n    const response = await covid19IndiaApi.get('/v2/state_district_wise.json');\r\n    const stateDetails = response.data.filter(state => state.statecode === stateCode);\r\n    \r\n    const zoneResponse = await covid19IndiaApi.get('/zones.json');\r\n    const zones = zoneResponse.data.zones.filter(zone => zone.statecode === stateCode);\r\n    \r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_INDIA_STATE_DETAILS,\r\n        payload: {stateDetails,zones}\r\n    });\r\n\r\n    //fetchStateZoneDetails(stateCode);\r\n}\r\n\r\nexport const fetchStateZoneDetails = (stateCode) => async dispatch =>{\r\n    const response = await covid19IndiaApi.get('/zones.json');\r\n    const zones = response.data.zones.filter(zone => zone.statecode === stateCode);\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_STATE_ZONE_DETAILS,\r\n        payload: zones\r\n    });\r\n}","import React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport { FundTwoTone } from '@ant-design/icons';\r\n\r\nimport { Card, Statistic, Row, Col, Typography, Space,Badge, Tag  } from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport const StatsSummaryCard = (props) =>{\r\n    const {\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        newConfirmed,\r\n        newRecovered,\r\n        newDeaths,\r\n        totalActive,\r\n        recoverRatePercentage,\r\n        deathRatePercentage,\r\n        lastUpdated\r\n    } = props;\r\n\r\n    const confirmed = totalConfirmed ? parseInt(totalConfirmed) : 0;\r\n    const active = totalActive ? parseInt(totalActive):0;\r\n    const recovered = totalRecovered ? parseInt(totalRecovered) : 0;\r\n    const deaths = totalDeaths ? parseInt(totalDeaths) : 0;\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Space direction=\"vertical\">\r\n            <Title level={4}>{props.title} &nbsp; <FundTwoTone /></Title>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Confirmed\"\r\n                    formatter={()=><CountUp end={confirmed} separator =\",\"/>}\r\n                    valueStyle={{ color: 'orange' }}\r\n                    />\r\n                </Col>\r\n                {totalActive && <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Active\"\r\n                    formatter={()=><CountUp end={active} separator =\",\"/>}\r\n                    valueStyle={{ color: 'volcano' }}\r\n                    />\r\n                </Col>}\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Recovered\"\r\n                    formatter={()=><CountUp end={recovered} separator =\",\"/>}\r\n                    valueStyle={{ color: 'green' }}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Deaths\"\r\n                    formatter={()=><CountUp end={deaths} separator =\",\"/>}\r\n                    valueStyle={{ color: 'red' }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col flex=\"auto\">\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <h4>Today</h4>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                           <Badge color=\"orange\" text=\"Confirmed\" />: <CountUp end={newConfirmed?parseInt(newConfirmed):0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"green\" text=\"Recovered\" />: <CountUp end={newRecovered?parseInt(newRecovered):0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"red\" text=\"Deaths\" />: <CountUp end={newDeaths?parseInt(newDeaths):0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                            <Tag color=\"green\">{recoverRatePercentage}</Tag>\r\n                            <Tag color=\"volcano\">{deathRatePercentage}</Tag>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                           <Tag color=\"default\">Last Updated On : {lastUpdated}</Tag>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            </Space>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StatsSummaryCard;\r\n","import React, { Component } from 'react';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\n\r\nexport class GlobalStatsCard extends Component {\r\n\r\n    renderGlobalStatsCard=()=>{\r\n        \r\n        const statsSummary = {\r\n            ...this.props.global,\r\n            ...this.props\r\n        }\r\n\r\n        return(\r\n            <StatsSummaryCard {...statsSummary}  title='Global Stats' /> \r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderGlobalStatsCard()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GlobalStatsCard\r\n","import React from 'react';\r\nimport { Row, Col, Badge  } from 'antd';\r\n\r\n\r\nexport function sortByProperty(property) {\r\n    return function (a, b) {\r\n        if (a[property] > b[property])\r\n            return -1;\r\n        else if (a[property] < b[property])\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function LightenDarkenColor(col, amt) {\r\n    col = parseInt(col, 16);\r\n    return `#${(((col & 0x0000FF) + amt) | ((((col >> 8) & 0x00FF) + amt) << 8) | (((col >> 16) + amt) << 16)).toString(16)}`;\r\n}\r\n\r\n\r\nexport const generateFillColor = (confirmed) => {\r\n    let colorScale = '#b30000';\r\n\r\n    if (confirmed===0){\r\n        colorScale = '#ffede5';\r\n    }\r\n    else if (0 <= confirmed && confirmed <= 99) {\r\n        colorScale = '#ff8080';\r\n    } \r\n    else if (100 <= confirmed && confirmed <= 999) {\r\n        colorScale = '#ff4d4d';\r\n    } \r\n    else if (1000 <= confirmed && confirmed <= 9999) {\r\n        colorScale = '#ff1a1a'\r\n        \r\n    } \r\n    else if (10000 <= confirmed && confirmed <= 49999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else if (50000 <= confirmed && confirmed <= 99999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else {\r\n        colorScale = '#800000'\r\n    }\r\n\r\n    return colorScale;\r\n}\r\n\r\nexport const renderToolTipContent = (name,confirmed,recovered,deaths) =>{\r\n    return(\r\n        <Row>\r\n            <Col flex=\"auto\" style={{maxWidth:'150px'}}>\r\n                <Row>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        {name}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"orange\" text=\"Confirmed\" />: {formatNumber(confirmed)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"green\" text=\"Recovered\" />: {formatNumber(recovered)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"red\" text=\"Deaths\" />: {formatNumber(deaths)}\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nexport function percentageCalculator(actual, total) {\r\n    return Math.round((actual / total) * 100);\r\n}\r\n\r\n// TEST\r\n","import React from \"react\";\r\n\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup\r\n} from \"react-simple-maps\";\r\nimport {generateFillColor,renderToolTipContent} from '../../resources/helper';\r\n\r\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n\r\n\r\n\r\nexport const MapChart = (props) => {\r\n\r\n    return (\r\n      <>\r\n      <ComposableMap projectionConfig={{rotate: [-10, 0, 0],scale: 180}} data-tip=\"\">\r\n      {\r\n        props.countries.length > 0 && (\r\n          <ZoomableGroup zoom={1} >\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const d = props.countries.find(s => s.code === geo.properties.ISO_A2);\r\n                  geo.confirmed = d? d.confirmed: 0;\r\n                  geo.recovered = d ? d.recovered : 0;\r\n                  geo.deaths = d? d.deaths:0;\r\n\r\n                  return (\r\n                    <Geography key={geo.rsmKey} geography={geo}\r\n                      values={d?d.confirmed:0}\r\n                      fill={d ? generateFillColor(d.confirmed) : \"#f8f8ff\"}\r\n                      style={{hover: {fill: \"#F53\", outline: \"none\"}}}\r\n                      onMouseEnter={(e) => {\r\n                        const { NAME} = geo.properties;\r\n                        props.setTooltipContent(renderToolTipContent(NAME, geo.confirmed, geo.recovered, geo.deaths));\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        props.setTooltipContent(``);\r\n                      }}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        )}\r\n\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","import React from 'react'\r\nimport MapChart from '../UI/MapChart';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { Typography , Tag, Skeleton} from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\n\r\n\r\nfunction GlobalMap(props) {\r\n    const [content, setContent] = React.useState(\"\");\r\n    \r\n    if (props.countries.length > 0) {\r\n        return (\r\n        <div>\r\n            <Title level={4} style={{textAlign:'center'}}>World Map </Title>\r\n            <MapChart countries={props.countries} totalConfirmed={props.totalConfirmed} setTooltipContent={setContent}/>\r\n            <ReactTooltip backgroundColor=\"white\">{content}</ReactTooltip>\r\n\r\n            <Tag color=\"#ff8080\">1 to 99</Tag>\r\n            <Tag color=\"#ff4d4d\">100 to 999</Tag>\r\n            <Tag color=\"#ff1a1a\">1,000 to 9,999</Tag>\r\n            <Tag color=\"#e60000\">10,000 to 49,999</Tag>\r\n            <Tag color=\"#b30000\">50,000 to 99,999</Tag>\r\n            <Tag color=\"#800000\">100,000+</Tag>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n    else{\r\n        return(<Skeleton active />)\r\n    }\r\n}\r\n\r\nexport default GlobalMap\r\n","import React, { Component } from 'react';\r\nimport { Card, List, Row, Col, Typography} from 'antd';\r\nimport GlobalMap from './GlobalMap';\r\nimport { FireTwoTone } from '@ant-design/icons';\r\n\r\n\r\nconst { Title  } = Typography\r\n\r\nexport class MostAffectedCountryCard extends Component {\r\n\r\n\r\n    renderMap = () =>{\r\n        return(\r\n            <GlobalMap countries={this.props.countries} totalConfirmed={this.props.totalConfirmed} / >\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {countries} = this.props;\r\n        return (\r\n            <Card>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                    <Title level={4}>Most Affected Countires &nbsp; <FireTwoTone /></Title>\r\n                        <List\r\n                            bordered={false}\r\n                            dataSource={countries.slice(0,10)}\r\n                            renderItem={country => (\r\n                                <List.Item extra={country.percentage} key={country.code.toLowerCase()}>\r\n                                    <Typography.Text>{country.name}</Typography.Text> \r\n                                </List.Item>\r\n                            )}\r\n                        /> \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\" style={{minWidth:'200px'}}>\r\n                        {this.renderMap()}\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MostAffectedCountryCard\r\n","import React, { Component } from 'react';\r\n\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Layout, Row, Col, Skeleton } from 'antd';\r\nimport GlobalStatsCard from './GlobalStatsCard';\r\nimport MostAffectedCountryCard from './MostAffectedCountryCard';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class GlobalStatsContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchGlobalData();\r\n    }\r\n\r\n    renderGlobalStats =()=>{\r\n        if (this.props.global){\r\n            const {global,recoverRatePercentage,deathRatePercentage,lastUpdated} = this.props;\r\n            return(\r\n                <GlobalStatsCard global={global} recoverRatePercentage={recoverRatePercentage} \r\n                        deathRatePercentage={deathRatePercentage} lastUpdated={lastUpdated} / >\r\n            )\r\n        }\r\n        else{\r\n            return(<Skeleton active />)\r\n        }\r\n    }\r\n\r\n    renderMostAffectedCard =() =>{\r\n        if(this.props.global){\r\n             const {countries} = this.props;\r\n             return(<MostAffectedCountryCard countries={countries} totalConfirmed={this.props.global.totalConfirmed} / >)\r\n        }\r\n        else{\r\n            return(<Skeleton active />)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Content>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    {this.renderGlobalStats()}\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"5\">\r\n                    {this.renderMostAffectedCard()}\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    global : {...state.global.global},\r\n    recoverRatePercentage: state.global.recoverRatePercentage,\r\n    deathRatePercentage: state.global.deathRatePercentage,\r\n    lastUpdated: state.global.lastUpdated,\r\n    countries: state.global.countries\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalStatsContainer)\r\n","import React, { Component } from 'react';\r\nimport {formatNumber,percentageCalculator} from '../../resources/helper';\r\n\r\nimport { Table, Tag, Tooltip, Badge, Card } from 'antd';\r\n\r\nexport class IndiaStatesSummaryTable extends Component {\r\n    \r\n    columns = [\r\n    {\r\n        title: 'State',\r\n        dataIndex: 'state',\r\n        key: 'state',\r\n        fixed: 'left',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render: text => (<Tooltip title={text}>\r\n                                <label>{text}</label>\r\n                        </Tooltip>),\r\n    },\r\n    {\r\n        title: 'Confirmed',\r\n        dataIndex: 'confirmed',\r\n        key: 'confirmed',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='orange' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Active',\r\n        dataIndex: 'active',\r\n        key: 'active',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='volcano' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Recovered',\r\n        key: 'recovered',\r\n        dataIndex: 'recovered',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='green' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Deaths',\r\n        key: 'deaths',\r\n        dataIndex: 'deaths',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='red' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    \r\n];\r\n\r\n   \r\n\r\n    renderDeltaInfo = (record) => {\r\n        return (\r\n            <div style={{padding:'10px'}}>\r\n                <p>\r\n                    Stats: &nbsp; &nbsp;\r\n                    <Tag color=\"green\">{percentageCalculator(record.recovered, record.confirmed)}% Recoverey Rate</Tag>\r\n                    <Tag color=\"volcano\">{percentageCalculator(record.deaths, record.confirmed)}% Fatality Rate</Tag>\r\n                </p>\r\n                <Badge color=\"orange\" text=\"New Confrimed\" />:&nbsp;{record.deltaconfirmed}\r\n                <br/>\r\n                <Badge color=\"green\" text=\"New Recovered\" />:&nbsp;{record.deltarecovered}\r\n                <br/>\r\n                <Badge color=\"red\" text=\"New Deaths\" />:&nbsp;{record.deltadeaths}\r\n                <br/>\r\n                <label>Last Updated:&nbsp;{record.lastupdatedtime}</label>\r\n                <p>{record.statenotes}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <Card>\r\n                <h3 style={{textAlign: 'center'}}>\r\n                    State Wise Stats\r\n                </h3>\r\n                <Table columns={this.columns} dataSource={this.props.allStates} size=\"small\"\r\n                    expandable={{\r\n                        expandedRowRender: record => (this.renderDeltaInfo(record))\r\n                    }}\r\n                />\r\n          </Card>  \r\n         \r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatesSummaryTable\r\n","import React from 'react';\r\n\r\nimport {\r\n    Chart,\r\n    ChartTitle,\r\n    ChartSeries,\r\n    ChartSeriesItem,\r\n    ChartCategoryAxis,\r\n    ChartCategoryAxisItem,\r\n    ChartLegend\r\n} from '@progress/kendo-react-charts';\r\n\r\nexport const SimpleLineChart= (props) => {\r\n    return (\r\n        <Chart>\r\n            <ChartTitle text={props.title} />\r\n            <ChartLegend position=\"top\" orientation=\"horizontal\" />\r\n            <ChartSeries>\r\n                <ChartSeriesItem\r\n                    name=\"Confirmed\"\r\n                    type=\"line\" \r\n                    field=\"confirmed\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Recovered\"\r\n                    type=\"line\"\r\n                    field=\"deaths\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Deaths\"\r\n                    type=\"line\"\r\n                    field=\"recovered\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n            </ChartSeries>\r\n            <ChartCategoryAxis>\r\n                <ChartCategoryAxisItem baseUnit=\"fit\" />\r\n            </ChartCategoryAxis>\r\n        </Chart>\r\n    );\r\n}\r\n\r\nexport default SimpleLineChart","import React, { Component } from 'react';\r\nimport SimpleLineChart from '../UI/SimpleLineChart';\r\nimport { Card } from 'antd';\r\nimport { LineChartOutlined } from '@ant-design/icons';\r\n\r\nexport class IndiaStatsChart extends Component {\r\n\r\n    renderTitle = ()=>{\r\n        return(\r\n            <h3 style={{textAlign: 'center'}}>\r\n                Day Wise Stats <LineChartOutlined />\r\n            </h3>\r\n        )\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <Card>\r\n                {this.renderTitle()}\r\n                <SimpleLineChart category={this.props.category} />\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatsChart\r\n","import React from 'react';\r\nimport { Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function SateSelectDDL(props) {\r\n  return (\r\n    <Select defaultValue=\"KA\" style={{ width: '50%' }} onChange={props.handleChange} size=\"large\">\r\n      {\r\n          props.states.map(state=>{\r\n              return(\r\n                <Option value={state.statecode} key={state.statecode}>{state.state}</Option>\r\n              )\r\n          })\r\n      }\r\n    </Select>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport {formatNumber, sortByProperty} from '../../resources/helper';\r\n\r\nimport { Table, Tag, Tooltip } from 'antd';\r\n\r\nexport class StateDistrictTable extends Component {\r\n     columns = [\r\n        {\r\n            title: 'District',\r\n            dataIndex: 'district',\r\n            key: 'district',\r\n            fixed: 'left',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render: text => (<Tooltip title={text}>\r\n                                <label>{text}</label>\r\n                            </Tooltip>),\r\n        },\r\n        {\r\n            title: 'Confirmed',\r\n            dataIndex: 'confirmed',\r\n            key: 'confirmed',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render:  value => (<Tag color='orange' key={value}>{formatNumber(value)}</Tag>),\r\n        },\r\n        {\r\n            title: 'Active',\r\n            dataIndex: 'active',\r\n            key: 'active',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render:  value => (<Tag color='volcano' key={value}>{formatNumber(value)}</Tag>),\r\n        },\r\n        {\r\n            title: 'Recovered',\r\n            key: 'recovered',\r\n            dataIndex: 'recovered',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render:  value => (<Tag color='green' key={value}>{formatNumber(value)}</Tag>),\r\n        },\r\n        {\r\n            title: 'Deaths',\r\n            key: 'deceased',\r\n            dataIndex: 'deceased',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render:  value => (<Tag color='red' key={value}>{formatNumber(value)}</Tag>),\r\n        },\r\n        {\r\n            title: 'Zones',\r\n            key: 'zone',\r\n            dataIndex: 'zone',\r\n            ellipsis: true,\r\n            responsive: ['md'],\r\n            render:  value => (<Tag color={value} key={value}>&nbsp;&nbsp;&nbsp;</Tag>),\r\n        },\r\n    ];\r\n    \r\n    render() {\r\n        const stateDetailsSortBy = this.props.stateDetails.sort(sortByProperty('confirmed'));\r\n        return (\r\n            <Table columns={this.columns} dataSource={stateDetailsSortBy} size=\"small\"\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default StateDistrictTable\r\n","import React, { Component } from 'react'\r\nimport SateSelectDDL from '../UI/SateSelectDDL';\r\nimport {connect} from 'react-redux';\r\nimport {fetchIndiaStateDetails} from '../../redux/actions/index';\r\n\r\nimport StateDistrictTable from './StateDistrictTable';\r\n\r\nimport { Skeleton, Row, Col, Card } from 'antd';\r\n\r\nexport class StateDetails extends Component {\r\n  \r\n    componentDidMount(){\r\n        this.props.fetchIndiaStateDetails('KA');\r\n    }\r\n\r\n    onStateChange = (stateCode)=>{\r\n        this.props.fetchIndiaStateDetails(stateCode);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.allStates && this.props.stateDetails) {\r\n            return (\r\n                <Card>\r\n                    <h3 style={{textAlign: 'center'}}>\r\n                        District Wise Stats\r\n                    </h3>\r\n                    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                        <Col span={24} style={{textAlign:'center'}}>\r\n                            <SateSelectDDL states={this.props.allStates} handleChange={this.onStateChange}/>\r\n                        </Col>\r\n                        <Col span={24} style={{marginTop: '20px'}}>\r\n                            <StateDistrictTable stateDetails={this.props.stateDetails}/>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            )\r\n        }\r\n        else{\r\n            return(<Skeleton active />)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    console.log(state);\r\n    return {\r\n        stateDetails: state.indiaData.stateDetailsWithZones\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchIndiaStateDetails})(StateDetails)\r\n","import React, { Component } from 'react'\r\nimport {fetchIndiaStateSummary} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport IndiaStatesSummaryTable from './IndiaStatesSummaryTable';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\nimport IndiaStatsChart from './IndiaStatsChart';\r\nimport StateDetails from './StateDetails';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class IndiaStatsContainer extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchIndiaStateSummary();\r\n    }\r\n\r\n    renderStatsSummary = () =>{\r\n\r\n        const statsSummary = {\r\n            totalConfirmed: this.props.summary.confirmed,\r\n            totalRecovered: this.props.summary.recovered,\r\n            totalDeaths: this.props.summary.deaths,\r\n            newConfirmed: this.props.summary.deltaconfirmed,\r\n            newRecovered: this.props.summary.deltarecovered,\r\n            newDeaths: this.props.summary.deltadeaths,\r\n            totalActive: this.props.summary.active,\r\n            recoverRatePercentage: `${Math.round((this.props.summary.recovered / this.props.summary.confirmed) * 100)} % Recoverey Rate`,\r\n            deathRatePercentage: `${Math.round((this.props.summary.deaths / this.props.summary.confirmed) * 100)} % Fatality Rate`,\r\n            lastUpdated: this.props.summary.lastupdatedtime,\r\n        }\r\n        return(\r\n            <>\r\n                <StatsSummaryCard {...statsSummary}  title='India Stats'/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderStateSummaryTable = () =>{\r\n        return(\r\n            <IndiaStatesSummaryTable allStates={this.props.allStates} />\r\n        )\r\n    }\r\n\r\n    renderStateDetails = () =>{\r\n       return(\r\n            <StateDetails allStates={this.props.allStates}/>\r\n       )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Content>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col span={24} flex=\"1\" className=\"gutter-row\">\r\n                        {\r\n                            this.renderStatsSummary()\r\n                        }\r\n                    </Col>\r\n                    <Col flex=\"auto\" className=\"gutter-row\">\r\n                        <IndiaStatsChart category={this.props.chatDataCategory} \r\n                            confirmed={this.props.chartDataConfirmed}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" flex=\"auto\" >\r\n                        {this.renderStateSummaryTable()}\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                        {this.renderStateDetails()}\r\n                    </Col>\r\n                </Row>\r\n            </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n\r\n    return{\r\n            allStates: state.indiaData.allStates.slice(1, state.indiaData.allStates.length),\r\n            summary: {\r\n                ...state.indiaData.allStates.slice(0,1)[0]\r\n            },\r\n            chatDataCategory: state.indiaData.casesTimeSeriesChartDataCategory,\r\n            chartDataConfirmed: state.indiaData.casesTimeSeriesChartDataConfirmed\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchIndiaStateSummary})(IndiaStatsContainer)\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport PageFooter from './components/nav-bar/Footer';\nimport 'antd/dist/antd.css';\nimport { Layout, Row, Col } from 'antd';\nimport GlobalStatsContainer from './components/globalContent/GlobalStatsContainer';\n\nimport { Tabs } from 'antd';\nimport IndiaStatsContainer from './components/india-stats/IndiaStatsContainer';\nimport '@progress/kendo-theme-default/dist/all.css';\n\n\nconst { TabPane } = Tabs;\n\nconst renderTabBar = (props, DefaultTabBar) => (\n  <DefaultTabBar {...props} className=\"site-custom-tab-bar\" />\n);\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n     <Layout>\n       <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n        <div style={{padding:'10px', minHeight: '90vh'}} >\n          <Tabs defaultActiveKey=\"1\" tabPosition='top' size=\"large\" renderTabBar={renderTabBar}>\n            <TabPane tab=\"Global\" key=\"1\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col className=\"gutter-row\" span={24}>\n                    <GlobalStatsContainer/>\n                  </Col>\n                 </Row>\n            </TabPane>\n            <TabPane tab=\"India\" key=\"2\">\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col className=\"gutter-row\" span={24}>\n                  <IndiaStatsContainer />\n                </Col>\n              </Row>\n            </TabPane>\n          </Tabs>\n        </div>\n        <PageFooter />\n    </Layout>\n  );\n\n}\n\nexport default App;\n","import {ACTION_TYPE} from '../../resources/const';\r\nimport {sortByProperty,percentageCalculator} from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    global: {},\r\n    countries: [],\r\n    recoverRatePercentage: '',\r\n    deathRatePercentage: '',\r\n    lastUpdated: '',\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n            const data = action.payload.Global;\r\n            const global = {\r\n                newConfirmed: data.NewConfirmed,\r\n                totalConfirmed: data.TotalConfirmed,\r\n                newDeaths: data.NewDeaths,\r\n                totalDeaths: data.TotalDeaths,\r\n                newRecovered: data.NewRecovered,\r\n                totalRecovered: data.TotalRecovered\r\n            }\r\n\r\n            state.recoverRatePercentage = `${percentageCalculator(global.totalRecovered,global.totalConfirmed)} % Recoverey Rate`;\r\n            state.deathRatePercentage = `${percentageCalculator(global.totalDeaths,global.totalConfirmed)} % Fatality Rate`;\r\n            state.lastUpdated = `${new Date(action.payload.Date).toLocaleDateString()} ${new Date(action.payload.Date).toLocaleTimeString()}`;\r\n            state.global = global\r\n\r\n            const countries = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentageNumber: ((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2),\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countries.sort(sortByProperty('confirmed'));\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n       \r\n        case ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY:\r\n\r\n            const countriesList = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countriesList.sort(sortByProperty('confirmed'));\r\n            \r\n        return {...state};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { ACTION_TYPE } from '../../resources/const';\r\n\r\nconst INITIAL_STATE = {\r\n    allStates: [],\r\n    casesTimeSeriesChartData: [],\r\n    casesTimeSeriesChartDataConfirmed: [],\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY:\r\n            let count = 0;\r\n            //state.allStates = action.payload.statewise;\r\n            state.allStates = action.payload.statewise.map((state) => {\r\n                count++;\r\n                return{\r\n                    key: count,\r\n                    ...state\r\n                }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataCategory = action.payload.cases_time_series.map((series)=>{\r\n                return {\r\n                        date: new Date(new Date(series.date).setYear('2020')),\r\n                        confirmed: parseInt(series.totalconfirmed),\r\n                        deaths: parseInt(series.totaldeceased),\r\n                        recovered: parseInt(series.totalrecovered)\r\n                    }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataConfirmed = action.payload.cases_time_series.map((series) => {\r\n                return series.totalconfirmed\r\n            });\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n        case ACTION_TYPE.FETCH_INDIA_STATE_DETAILS:\r\n            const stateDetailsWithZones = action.payload.stateDetails[0].districtData.map((item,index) => ({\r\n                    key: index,\r\n                    ...item, \r\n                    ...{\r\n                        ...action.payload.zones.filter(zone => zone.district === item.district).map(zone => ({\r\n                            zone: zone.zone,\r\n                            lastUpdated: zone.lastupdated,\r\n                            zoneSource: zone.source\r\n                        }))[0]\r\n                    }\r\n                })\r\n            );\r\n            state.stateDetails = {...action.payload.stateDetails[0]}\r\n            state.stateDetailsWithZones = stateDetailsWithZones;\r\n            return {...state}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport indiaStatsReducer from './indiaStatsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    indiaData: indiaStatsReducer,\r\n});","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}