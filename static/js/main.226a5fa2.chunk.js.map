{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","components/nav-bar/Footer.js","apis/api.covid19api.js","apis/api.covid19India.js","resources/const.js","redux/actions/index.js","components/UI/StatsSummaryCard.js","components/globalContent/GlobalStatsCard.js","resources/helper.js","components/UI/MapChart.js","components/globalContent/GlobalMap.js","components/globalContent/MostAffectedCountryCard.js","components/globalContent/GlobalStatsContainer.js","components/india-stats/IndiaStatesSummaryTable.js","components/UI/SimpleLineChart.js","components/india-stats/IndiaStatsChart.js","components/india-stats/IndiaStatsContainer.js","App.js","redux/reducer/globalDataReducer.js","redux/reducer/indiaStatsReducer.js","redux/reducer/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","color","Footer","Layout","PageFooter","textAlign","backgroundColor","href","CopyrightTwoTone","spin","twoToneColor","Date","getFullYear","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Api","get","response","type","payload","data","Title","StatsSummaryCard","totalConfirmed","totalRecovered","totalDeaths","newConfirmed","newRecovered","newDeaths","totalActive","recoverRatePercentage","deathRatePercentage","lastUpdated","direction","level","FundTwoTone","gutter","xs","sm","md","lg","flex","formatter","end","separator","valueStyle","span","text","GlobalStatsCard","renderGlobalStatsCard","statsSummary","global","this","Component","sortByProperty","property","b","formatNumber","num","toString","replace","percentageCalculator","actual","total","Math","round","MapChart","projectionConfig","rotate","scale","data-tip","countries","length","zoom","geography","geographies","map","geo","confirmed","d","find","s","code","properties","ISO_A2","recovered","deaths","key","rsmKey","values","fill","hover","outline","onMouseEnter","e","NAME","setTooltipContent","name","maxWidth","renderToolTipContent","onMouseLeave","GlobalMap","React","useState","content","setContent","MostAffectedCountryCard","renderMap","FireTwoTone","bordered","dataSource","slice","renderItem","country","Item","extra","percentage","toLowerCase","Text","minWidth","Content","GlobalStatsContainer","renderGlobalStats","renderMostAffectedCard","connect","state","bindActionCreators","IndiaStatesSummaryTable","columns","dataIndex","fixed","ellipsis","responsive","render","value","renderDeltaInfo","record","padding","deltaconfirmed","deltarecovered","deltadeaths","lastupdatedtime","allStates","size","expandable","expandedRowRender","SimpleLineChart","field","categoryField","category","markers","visible","baseUnit","IndiaStatsChart","renderTitle","LineChartOutlined","IndiaStatsContainer","renderStatsSummary","summary","active","renderStateSummaryTable","fetchIndiaStateSummary","chatDataCategory","chartDataConfirmed","indiaData","casesTimeSeriesChartDataCategory","casesTimeSeriesChartDataConfirmed","covid19IndiaApi","TabPane","Tabs","renderTabBar","DefaultTabBar","App","sub","minHeight","defaultActiveKey","tabPosition","tab","INITIAL_STATE","casesTimeSeriesChartData","combineReducers","action","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","toLocaleDateString","toLocaleTimeString","Countries","Country","CountryCode","slug","Slug","percentageNumber","toFixed","sort","countriesList","count","statewise","cases_time_series","series","date","setYear","parseInt","totalconfirmed","totaldeceased","totalrecovered","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.226a5fa2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px' , color: 'white'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport { CopyrightTwoTone  } from '@ant-design/icons';\r\nconst { Footer } = Layout;\r\n\r\nexport default function PageFooter() {\r\n  return (\r\n     <Footer style={{ textAlign: 'center', backgroundColor:'#2196f3' }}>\r\n       <p>\r\n          Developed by <a href=\"https://github.com/pavelray\" style={{color: 'black'}} >#Ray</a>\r\n       </p>\r\n       <p>\r\n          Covid-19 Tracker <CopyrightTwoTone  spin twoToneColor=\"#eb2f96\"/> &nbsp;{new Date().getFullYear()}\r\n       </p>\r\n       \r\n       {/* <p>\r\n          API Used : <a href=\"https://api.covid19api.com\" style={{color: 'black'}}>covid19api</a>&nbsp;and&nbsp; \r\n          <a href=\"https://api.covid19india.org\" style={{color: 'black'}}>covid19india</a>\r\n       </p> */}\r\n     </Footer>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19api.com'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19india.org'\r\n});\r\n","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRY_SUMMARY: 'FETCH_ALL_COUNTRY_SUMMARY',\r\n    FETCH_INDIA_STATE_SUMMARY: 'FETCH_INDIA_STATE_SUMMARY',\r\n}","import covid19Api from '../../apis/api.covid19api';\r\nimport covid19IndiaApi from '../../apis/api.covid19India';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchIndiaStateSummary = () => async dispatch =>{\r\n    const response = await covid19IndiaApi.get('/data.json');\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY,\r\n        payload: response.data\r\n    });\r\n}\r\n\r\n","import React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport { FundTwoTone } from '@ant-design/icons';\r\n\r\nimport { Card, Statistic, Row, Col, Typography, Space,Badge, Tag  } from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport const StatsSummaryCard = (props) =>{\r\n    const {\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        newConfirmed,\r\n        newRecovered,\r\n        newDeaths,\r\n        totalActive,\r\n        recoverRatePercentage,\r\n        deathRatePercentage,\r\n        lastUpdated\r\n    } = props;\r\n\r\n    return (\r\n        <Card>\r\n            <Space direction=\"vertical\">\r\n            <Title level={4}>{props.title} &nbsp; <FundTwoTone /></Title>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Confirmed\"\r\n                    formatter={()=><CountUp end={totalConfirmed?totalConfirmed:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'orange' }}\r\n                    />\r\n                </Col>\r\n                {totalActive && <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Active\"\r\n                    formatter={()=><CountUp end={totalActive?totalActive:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'volcano' }}\r\n                    />\r\n                </Col>}\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Recovered\"\r\n                    formatter={()=><CountUp end={totalRecovered?totalRecovered:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'green' }}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Deaths\"\r\n                    formatter={()=><CountUp end={totalDeaths?totalDeaths:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'red' }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col flex=\"auto\">\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <h4>Today</h4>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                           <Badge color=\"orange\" text=\"Confirmed\" />: <CountUp end={newConfirmed?newConfirmed:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"green\" text=\"Recovered\" />: <CountUp end={newRecovered?newRecovered:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"red\" text=\"Deaths\" />: <CountUp end={newDeaths?newDeaths:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                            <Tag color=\"green\">{recoverRatePercentage}</Tag>\r\n                            <Tag color=\"volcano\">{deathRatePercentage}</Tag>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                           <Tag color=\"default\">Last Updated On : {lastUpdated}</Tag>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            </Space>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StatsSummaryCard;\r\n","import React, { Component } from 'react';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\n\r\nexport class GlobalStatsCard extends Component {\r\n\r\n    renderGlobalStatsCard=()=>{\r\n        \r\n        const statsSummary = {\r\n            ...this.props.global,\r\n            ...this.props\r\n        }\r\n\r\n        return(\r\n            <StatsSummaryCard {...statsSummary}  title='Global Stats' /> \r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderGlobalStatsCard()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GlobalStatsCard\r\n","import React from 'react';\r\nimport { Row, Col, Badge  } from 'antd';\r\n\r\n\r\nexport function sortByProperty(property) {\r\n    return function (a, b) {\r\n        if (a[property] > b[property])\r\n            return -1;\r\n        else if (a[property] < b[property])\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function LightenDarkenColor(col, amt) {\r\n    col = parseInt(col, 16);\r\n    return `#${(((col & 0x0000FF) + amt) | ((((col >> 8) & 0x00FF) + amt) << 8) | (((col >> 16) + amt) << 16)).toString(16)}`;\r\n}\r\n\r\n\r\nexport const generateFillColor = (confirmed) => {\r\n    let colorScale = '#b30000';\r\n\r\n    if (confirmed===0){\r\n        colorScale = '#ffede5';\r\n    }\r\n    else if (0 <= confirmed && confirmed <= 99) {\r\n        colorScale = '#ff8080';\r\n    } \r\n    else if (100 <= confirmed && confirmed <= 999) {\r\n        colorScale = '#ff4d4d';\r\n    } \r\n    else if (1000 <= confirmed && confirmed <= 9999) {\r\n        colorScale = '#ff1a1a'\r\n        \r\n    } \r\n    else if (10000 <= confirmed && confirmed <= 49999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else if (50000 <= confirmed && confirmed <= 99999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else {\r\n        colorScale = '#800000'\r\n    }\r\n\r\n    return colorScale;\r\n}\r\n\r\nexport const renderToolTipContent = (name,confirmed,recovered,deaths) =>{\r\n    return(\r\n        <Row>\r\n            <Col flex=\"auto\" style={{maxWidth:'150px'}}>\r\n                <Row>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        {name}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"orange\" text=\"Confirmed\" />: {formatNumber(confirmed)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"green\" text=\"Recovered\" />: {formatNumber(recovered)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"red\" text=\"Deaths\" />: {formatNumber(deaths)}\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\nexport function percentageCalculator(actual, total) {\r\n    return Math.round((actual / total) * 100);\r\n}\r\n\r\n// TEST\r\n","import React from \"react\";\r\n\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup\r\n} from \"react-simple-maps\";\r\nimport {generateFillColor,renderToolTipContent} from '../../resources/helper';\r\n\r\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n\r\n\r\n\r\nexport const MapChart = (props) => {\r\n\r\n    return (\r\n      <>\r\n      <ComposableMap projectionConfig={{rotate: [-10, 0, 0],scale: 180}} data-tip=\"\">\r\n      {\r\n        props.countries.length > 0 && (\r\n          <ZoomableGroup zoom={1} >\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const d = props.countries.find(s => s.code === geo.properties.ISO_A2);\r\n                  geo.confirmed = d? d.confirmed: 0;\r\n                  geo.recovered = d ? d.recovered : 0;\r\n                  geo.deaths = d? d.deaths:0;\r\n\r\n                  return (\r\n                    <Geography key={geo.rsmKey} geography={geo}\r\n                      values={d?d.confirmed:0}\r\n                      fill={d ? generateFillColor(d.confirmed) : \"#f8f8ff\"}\r\n                      style={{hover: {fill: \"#F53\", outline: \"none\"}}}\r\n                      onMouseEnter={(e) => {\r\n                        const { NAME} = geo.properties;\r\n                        props.setTooltipContent(renderToolTipContent(NAME, geo.confirmed, geo.recovered, geo.deaths));\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        props.setTooltipContent(``);\r\n                      }}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        )}\r\n\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","import React from 'react'\r\nimport MapChart from '../UI/MapChart';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { Typography , Tag} from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\n\r\n\r\nfunction GlobalMap(props) {\r\n    const [content, setContent] = React.useState(\"\");\r\n    \r\n    if (props.countries.length > 0) {\r\n        return (\r\n        <div>\r\n            <Title level={4} style={{textAlign:'center'}}>World Map </Title>\r\n            <MapChart countries={props.countries} totalConfirmed={props.totalConfirmed} setTooltipContent={setContent}/>\r\n            <ReactTooltip backgroundColor=\"white\">{content}</ReactTooltip>\r\n\r\n            <Tag color=\"#ff8080\">1 to 99</Tag>\r\n            <Tag color=\"#ff4d4d\">100 to 999</Tag>\r\n            <Tag color=\"#ff1a1a\">1,000 to 9,999</Tag>\r\n            <Tag color=\"#e60000\">10,000 to 49,999</Tag>\r\n            <Tag color=\"#b30000\">50,000 to 99,999</Tag>\r\n            <Tag color=\"#800000\">100,000+</Tag>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n    else{\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nexport default GlobalMap\r\n","import React, { Component } from 'react';\r\nimport { Card, List, Row, Col, Typography} from 'antd';\r\nimport GlobalMap from './GlobalMap';\r\nimport { FireTwoTone } from '@ant-design/icons';\r\n\r\n\r\nconst { Title  } = Typography\r\n\r\nexport class MostAffectedCountryCard extends Component {\r\n\r\n\r\n    renderMap = () =>{\r\n        return(\r\n            <GlobalMap countries={this.props.countries} totalConfirmed={this.props.totalConfirmed} / >\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {countries} = this.props;\r\n        return (\r\n            <Card>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                    <Title level={4}>Most Affected Countires &nbsp; <FireTwoTone /></Title>\r\n                        <List\r\n                            bordered={false}\r\n                            dataSource={countries.slice(0,10)}\r\n                            renderItem={country => (\r\n                                <List.Item extra={country.percentage} key={country.code.toLowerCase()}>\r\n                                    <Typography.Text>{country.name}</Typography.Text> \r\n                                </List.Item>\r\n                            )}\r\n                        /> \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\" style={{minWidth:'200px'}}>\r\n                        {this.renderMap()}\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MostAffectedCountryCard\r\n","import React, { Component } from 'react';\r\n\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport GlobalStatsCard from './GlobalStatsCard';\r\nimport MostAffectedCountryCard from './MostAffectedCountryCard';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class GlobalStatsContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchGlobalData();\r\n    }\r\n\r\n    renderGlobalStats =()=>{\r\n        if (this.props.global){\r\n            const {global,recoverRatePercentage,deathRatePercentage,lastUpdated} = this.props;\r\n            return(\r\n                <GlobalStatsCard global={global} recoverRatePercentage={recoverRatePercentage} \r\n                        deathRatePercentage={deathRatePercentage} lastUpdated={lastUpdated} / >\r\n            )\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    renderMostAffectedCard =() =>{\r\n        if(this.props.global){\r\n             const {countries} = this.props;\r\n             return(<MostAffectedCountryCard countries={countries} totalConfirmed={this.props.global.totalConfirmed} / >)\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Content>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    {this.renderGlobalStats()}\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"5\">\r\n                    {this.renderMostAffectedCard()}\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    global : {...state.global.global},\r\n    recoverRatePercentage: state.global.recoverRatePercentage,\r\n    deathRatePercentage: state.global.deathRatePercentage,\r\n    lastUpdated: state.global.lastUpdated,\r\n    countries: state.global.countries\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalStatsContainer)\r\n","import React, { Component } from 'react';\r\nimport {formatNumber,percentageCalculator} from '../../resources/helper';\r\n\r\nimport { Table, Tag, Row, Col, Badge } from 'antd';\r\n\r\nexport class IndiaStatesSummaryTable extends Component {\r\n    \r\n    columns = [\r\n    {\r\n        title: 'State',\r\n        dataIndex: 'state',\r\n        key: 'state',\r\n        fixed: 'left',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render: text => <label>{text}</label>,\r\n    },\r\n    {\r\n        title: 'Confirmed',\r\n        dataIndex: 'confirmed',\r\n        key: 'confirmed',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='orange' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Active',\r\n        dataIndex: 'active',\r\n        key: 'active',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='volcano' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Recovered',\r\n        key: 'recovered',\r\n        dataIndex: 'recovered',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='green' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Deaths',\r\n        key: 'deaths',\r\n        dataIndex: 'deaths',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='red' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    \r\n];\r\n\r\n    renderDeltaInfo = (record) => {\r\n        return (\r\n            <div style={{padding:'10px'}}>\r\n                <p>\r\n                    Stats: &nbsp; &nbsp;\r\n                    <Tag color=\"green\">{percentageCalculator(record.recovered, record.confirmed)}% Recoverey Rate</Tag>\r\n                    <Tag color=\"volcano\">{percentageCalculator(record.deaths, record.confirmed)}% Fatality Rate</Tag>\r\n                </p>\r\n                <Badge color=\"orange\" text=\"New Confrimed\" />:&nbsp;{record.deltaconfirmed}\r\n                <br/>\r\n                <Badge color=\"green\" text=\"New Recovered\" />:&nbsp;{record.deltarecovered}\r\n                <br/>\r\n                <Badge color=\"red\" text=\"New Deaths\" />:&nbsp;{record.deltadeaths}\r\n                <br/>\r\n                <label>Last Updated:&nbsp;{record.lastupdatedtime}</label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Row>\r\n                <Col flex=\"1\">\r\n                    <Table columns={this.columns} dataSource={this.props.allStates} size=\"small\"\r\n                        expandable={{\r\n                            expandedRowRender: record => (this.renderDeltaInfo(record))\r\n                        }}\r\n                        title={() => 'State Wise Stats'}/>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatesSummaryTable\r\n","import React from 'react';\r\n\r\nimport {\r\n    Chart,\r\n    ChartTitle,\r\n    ChartSeries,\r\n    ChartSeriesItem,\r\n    ChartCategoryAxis,\r\n    ChartCategoryAxisItem\r\n} from '@progress/kendo-react-charts';\r\n\r\nexport const SimpleLineChart= (props) => {\r\n    return (\r\n        <Chart>\r\n            <ChartTitle text={props.title} />\r\n            <ChartSeries>\r\n                <ChartSeriesItem\r\n                    name=\"Confirmed\"\r\n                    type=\"line\" \r\n                    field=\"confirmed\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Recovered\"\r\n                    type=\"line\"\r\n                    field=\"deaths\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Deaths\"\r\n                    type=\"line\"\r\n                    field=\"recovered\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n            </ChartSeries>\r\n            <ChartCategoryAxis>\r\n                <ChartCategoryAxisItem baseUnit=\"fit\" />\r\n            </ChartCategoryAxis>\r\n        </Chart>\r\n    );\r\n}\r\n\r\nexport default SimpleLineChart","import React, { Component } from 'react';\r\nimport SimpleLineChart from '../UI/SimpleLineChart';\r\nimport { Card } from 'antd';\r\nimport { LineChartOutlined } from '@ant-design/icons';\r\n\r\nexport class IndiaStatsChart extends Component {\r\n\r\n    renderTitle = ()=>{\r\n        return(\r\n            <h3 style={{textAlign: 'center'}}>\r\n                Day Wise Stats <LineChartOutlined />\r\n            </h3>\r\n        )\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <Card>\r\n                {this.renderTitle()}\r\n                <SimpleLineChart category={this.props.category} confirmed={this.props.confirmed} />\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatsChart\r\n","import React, { Component } from 'react'\r\nimport {fetchIndiaStateSummary} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport IndiaStatesSummaryTable from './IndiaStatesSummaryTable';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\nimport IndiaStatsChart from './IndiaStatsChart';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class IndiaStatsContainer extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchIndiaStateSummary();\r\n    }\r\n\r\n    renderStatsSummary = () =>{\r\n\r\n        const statsSummary = {\r\n            totalConfirmed: this.props.summary.confirmed,\r\n            totalRecovered: this.props.summary.recovered,\r\n            totalDeaths: this.props.summary.deaths,\r\n            newConfirmed: this.props.summary.deltaconfirmed,\r\n            newRecovered: this.props.summary.deltarecovered,\r\n            newDeaths: this.props.summary.deltadeaths,\r\n            totalActive: this.props.summary.active,\r\n            recoverRatePercentage: `${Math.round((this.props.summary.recovered / this.props.summary.confirmed) * 100)} % Recoverey Rate`,\r\n            deathRatePercentage: `${Math.round((this.props.summary.deaths / this.props.summary.confirmed) * 100)} % Fatality Rate`,\r\n            lastUpdated: this.props.summary.lastupdatedtime,\r\n        }\r\n        return(\r\n            <>\r\n                <StatsSummaryCard {...statsSummary}  title='India Stats'/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderStateSummaryTable = () =>{\r\n        return(\r\n            <IndiaStatesSummaryTable allStates={this.props.allStates}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Content>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" span={24} flex=\"1\">\r\n                        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                            <Col flex=\"3\" className=\"gutter-row\">\r\n                                {this.renderStatsSummary()}\r\n                            </Col>\r\n                            <Col flex=\"auto\" className=\"gutter-row\">\r\n                               <IndiaStatsChart category={this.props.chatDataCategory} \r\n                                    confirmed={this.props.chartDataConfirmed}/>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                        {this.renderStateSummaryTable()}\r\n                    </Col>\r\n                </Row>\r\n            </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n\r\n    return{\r\n            allStates: state.indiaData.allStates.slice(1, state.indiaData.allStates.length),\r\n            summary: {\r\n                ...state.indiaData.allStates.slice(0,1)[0]\r\n            },\r\n            chatDataCategory: state.indiaData.casesTimeSeriesChartDataCategory,\r\n            chartDataConfirmed: state.indiaData.casesTimeSeriesChartDataConfirmed\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchIndiaStateSummary})(IndiaStatsContainer)\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport PageFooter from './components/nav-bar/Footer';\nimport 'antd/dist/antd.css';\nimport { Layout, Row, Col } from 'antd';\nimport GlobalStatsContainer from './components/globalContent/GlobalStatsContainer';\n\nimport { Tabs } from 'antd';\nimport IndiaStatsContainer from './components/india-stats/IndiaStatsContainer';\nimport '@progress/kendo-theme-default/dist/all.css';\n\n\nconst { TabPane } = Tabs;\n\nconst renderTabBar = (props, DefaultTabBar) => (\n  <DefaultTabBar {...props} className=\"site-custom-tab-bar\" />\n);\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n     <Layout>\n       <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n        <div style={{padding:'10px', minHeight: '90vh'}} >\n          <Tabs defaultActiveKey=\"1\" tabPosition='top' size=\"large\" renderTabBar={renderTabBar}>\n            <TabPane tab=\"Global\" key=\"1\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col className=\"gutter-row\" span={24}>\n                    <GlobalStatsContainer/>\n                  </Col>\n                 </Row>\n            </TabPane>\n            <TabPane tab=\"India\" key=\"2\">\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col className=\"gutter-row\" span={24}>\n                  <IndiaStatsContainer />\n                </Col>\n              </Row>\n            </TabPane>\n          </Tabs>\n        </div>\n        <PageFooter />\n    </Layout>\n  );\n\n}\n\nexport default App;\n","import {ACTION_TYPE} from '../../resources/const';\r\nimport {sortByProperty,percentageCalculator} from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    global: {},\r\n    countries: [],\r\n    recoverRatePercentage: '',\r\n    deathRatePercentage: '',\r\n    lastUpdated: '',\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n            const data = action.payload.Global;\r\n            const global = {\r\n                newConfirmed: data.NewConfirmed,\r\n                totalConfirmed: data.TotalConfirmed,\r\n                newDeaths: data.NewDeaths,\r\n                totalDeaths: data.TotalDeaths,\r\n                newRecovered: data.NewRecovered,\r\n                totalRecovered: data.TotalRecovered\r\n            }\r\n\r\n            state.recoverRatePercentage = `${percentageCalculator(global.totalRecovered,global.totalConfirmed)} % Recoverey Rate`;\r\n            state.deathRatePercentage = `${percentageCalculator(global.totalDeaths,global.totalConfirmed)} % Fatality Rate`;\r\n            state.lastUpdated = `${new Date(action.payload.Date).toLocaleDateString()} ${new Date(action.payload.Date).toLocaleTimeString()}`;\r\n            state.global = global\r\n\r\n            const countries = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentageNumber: ((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2),\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countries.sort(sortByProperty('confirmed'));\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n       \r\n        case ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY:\r\n\r\n            const countriesList = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countriesList.sort(sortByProperty('confirmed'));\r\n            \r\n        return {...state};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { ACTION_TYPE } from '../../resources/const';\r\nimport { sortByProperty } from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    allStates: [],\r\n    casesTimeSeriesChartData: [],\r\n    casesTimeSeriesChartDataConfirmed: []\r\n    \r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY:\r\n            let count = 0;\r\n            //state.allStates = action.payload.statewise;\r\n            state.allStates = action.payload.statewise.map((state) => {\r\n                count++;\r\n                return{\r\n                    key: count,\r\n                    ...state\r\n                }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataCategory = action.payload.cases_time_series.map((series)=>{\r\n                return {\r\n                        date: new Date(new Date(series.date).setYear('2020')),\r\n                        confirmed: parseInt(series.totalconfirmed),\r\n                        deaths: parseInt(series.totaldeceased),\r\n                        recovered: parseInt(series.totalrecovered)\r\n                    }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataConfirmed = action.payload.cases_time_series.map((series) => {\r\n                return series.totalconfirmed\r\n            });\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport indiaStatsReducer from './indiaStatsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    indiaData: indiaStatsReducer,\r\n});","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}