{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","apis/covid19.api.js","apis/country.api.js","resources/const.js","redux/actions/index.js","components/UI/Cards.js","components/global-summary/GlobalSummary.js","components/UI/CountryDDL.js","components/UI/CountryDetailsTable.js","components/country-details/CountryDetailsContainer.js","components/nav-bar/Footer.js","App.js","redux/reducer/countriesDetailsReducer.js","redux/reducer/index.js","redux/reducer/globalDataReducer.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Global","get","response","type","payload","data","fetchCountrySummary","selectedCountry","fetchCountryDetails","fetchAllCountries","minWidth","Cards","color","category","count","ratePercentage","Card","CardContent","gutterBottom","component","end","separator","GlobalSummary","renderGlobalContent","global","confirmed","recovered","deaths","recoverRatePercentage","deathRatePercentage","Grid","container","spacing","padding","item","xs","Box","textAlign","lastUpdated","Paper","this","Component","connect","state","bindActionCreators","CountryDDL","Dropdown","placeholder","fluid","search","selection","options","values","value","onChange","event","result","CountryDetailsTable","columns","CountryDetailsContainer","field","getCountrySummary","e","setState","renderCountrySummary","summary","details","countries","length","marginTop","Divider","Container","maxWidth","countryDetails","top","bottom","Footer","blue","backgroundColor","href","Date","getFullYear","App","sub","INITIAL_STATE","combineReducers","action","lastUpdate","toLocaleDateString","toLocaleTimeString","Math","round","map","country","text","name","key","iso2","iso3","flag","toLowerCase","combinedKey","active","incidentRate","toFixed","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.797d902e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n            baseURL: 'https://covid19.mathdro.id/api'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/all'\r\n});","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRIES_NAME: 'FETCH_ALL_COUNTRIES_NAME',\r\n    FETCH_COUNTRY_SUMMARY: 'FETCH_COUNTRY_SUMMARY',\r\n    FETCH_COUNTRY_DETAILS: 'FETCH_COUNTRY_DETAILS'\r\n}","import country from \"../../apis/country.api\";\r\nimport covid19Global from '../../apis/covid19.api';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\n// export const fetchGlobalData = () => async (dispatch, getState) => {\r\n//     await dispatch(fetchPost());\r\n\r\n//     const userIds = _.uniq(_.map(getState().posts,'userId'));\r\n//     userIds.forEach(id=> dispatch(fetchUser(id)));\r\n// }\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Global.get('/');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchCountrySummary = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_SUMMARY, payload: response.data});\r\n}\r\n\r\nexport const fetchCountryDetails = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}/confirmed`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_DETAILS, payload: response.data});\r\n}\r\n\r\nexport const fetchAllCountries = () => async dispatch =>{\r\n    const response = await covid19Global.get('/countries');\r\n    dispatch({type:ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME, payload: response.data});\r\n}\r\n\r\n","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 200,\r\n  },\r\n});\r\n\r\n\r\nexport default function Cards({color,category,count,ratePercentage}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    <CountUp end={count} separator =\",\"/>\r\n                </Typography>\r\n                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                    {category}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardContent className={color}>\r\n                <Typography variant=\"subtitle2\">\r\n                    {ratePercentage}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Cards from '../UI/Cards';\r\n\r\nexport class GlobalSummary extends Component {\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchGlobalData()\r\n  }\r\n\r\n  renderGlobalContent = () =>{\r\n    const {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    } = this.props.global;\r\n\r\n    return(\r\n      <div>\r\n        <Grid container spacing={3} style={{padding: '20px'}}>\r\n            <Grid item xs={12}>\r\n              <Box style={{textAlign:'center'}}>\r\n                <Typography variant=\"h5\" gutterBottom >\r\n                  Global Status\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Last updated on {this.props.global.lastUpdated}.\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={confirmed?confirmed:0} ratePercentage = {\"\"}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"olive-card-footer\" category=\"Recovered\" count={recovered?recovered:0} ratePercentage = {recoverRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"red-card-footer\" category=\"Deaths\" count={deaths?deaths:0} ratePercentage = {deathRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n        {\r\n          this.renderGlobalContent()\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    global : {...state.global}\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalSummary)\r\n","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nexport default function CountryDDL(props) {\r\n   \r\n    const onChange = (event, result) => {\r\n        props.onChange(result.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <Dropdown\r\n            placeholder='Select Country'\r\n            fluid\r\n            search\r\n            selection\r\n            options={props.values}\r\n            value={props.selectedCountry}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function CountryDetailsTable(props) {\r\n  return (\r\n    <MaterialTable\r\n      title=\"Area wise details\"\r\n      columns={props.columns}\r\n      data={props.data}\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport api from '../../apis/country.api';\r\nimport covidApi from '../../apis/covid19.api';\r\nimport CountryDDL from '../UI/CountryDDL';\r\nimport Cards from '../UI/Cards';\r\nimport CountryDetailsTable from '../UI/CountryDetailsTable';\r\nimport {fetchAllCountries,fetchCountrySummary,fetchCountryDetails} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nexport class CountryDetailsContainer extends Component {\r\n\r\n    state = {\r\n        selectedCountry: 'IND',\r\n    }\r\n\r\n    columns = [\r\n        { title: 'Area', field: 'combinedKey' },\r\n        { title: 'Confirmed', field: 'confirmed',type: 'numeric' },\r\n        { title: 'Active', field: 'active', type: 'numeric' },\r\n        { title: 'Death', field: 'deaths', type: 'numeric' },\r\n        { title: 'Incident Rate', field: 'incidentRate'},\r\n        { \r\n          title: 'Last Updated', field: 'lastUpdate' \r\n        }\r\n    ]\r\n        \r\n    \r\n\r\n    async componentDidMount(){\r\n        this.props.fetchAllCountries();\r\n        this.getCountrySummary(this.state.selectedCountry);\r\n    }\r\n    \r\n    getCountrySummary = async (selectedCountry) => {\r\n\r\n        this.props.fetchCountrySummary(selectedCountry);\r\n        this.props.fetchCountryDetails(selectedCountry);\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({selectedCountry:e});\r\n        this.getCountrySummary(e);\r\n    }\r\n\r\n    renderCountrySummary = () =>{\r\n        const {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            recoverRatePercentage,\r\n            deathRatePercentage\r\n        } = this.props.summary;\r\n\r\n        if(this.props.summary){\r\n            return(\r\n                <>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={confirmed?confirmed:0} ratePercentage = {\"\"}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"olive-card-footer\" category=\"Recovered\" count={recovered?recovered:0} ratePercentage = {recoverRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"red-card-footer\" category=\"Deaths\" count={deaths?deaths:0} ratePercentage = {deathRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <CountryDetailsTable columns={this.columns} data={this.props.details} />\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            )\r\n        }else{\r\n            return(\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper style={{padding: '20px'}}>\r\n                           <Typography variant=\"h6\">\r\n                               No data found for the selected country. \r\n                           </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if(this.props.countries && this.props.countries.length > 0){\r\n            return (\r\n                <div style={{marginTop: '25px'}}>\r\n                    <Divider variant=\"middle\" />\r\n                    <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n                        <Grid item xs={12}>\r\n                            <Box style={{textAlign:'center'}}>\r\n                                <Typography variant=\"h5\" gutterBottom >\r\n                                    Country Wise Details\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\" gutterBottom>\r\n                                    Last updated on {this.props.summary.lastUpdated}.\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <CountryDDL values={this.props.countries} onChange={this.onChange} selectedCountry={this.state.selectedCountry}/>\r\n                    </Container>\r\n                    {\r\n                        this.renderCountrySummary()\r\n                    }\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        countries : state.countryDetails.countries,\r\n        summary: state.countryDetails.summary,\r\n        details: state.countryDetails.details\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n    fetchAllCountries,\r\n    fetchCountrySummary,\r\n    fetchCountryDetails\r\n  },dispatch);\r\n  \r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CountryDetailsContainer)\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n     top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n  const color = blue[500];\r\n  return (\r\n   \r\n      <AppBar position=\"static\" className={classes.root} style={{backgroundColor: color , color: 'black'}}>\r\n        <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n            <Grid item xs={12}>\r\n                <Box style={{textAlign:'center'}}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom >\r\n                        Developed By <a href=\"https://github.com/pavelray\" style={{color: 'white'}}>#Ray</a> with <sub><FavoriteIcon /></sub> from India\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                       API Used - <a href=\"https://github.com/mathdroid/covid-19-api\" style={{color: 'white'}}>https://github.com/mathdroid/covid-19-api</a>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <CopyrightIcon/><sup>{new Date().getFullYear()}</sup> \r\n                    </Typography>\r\n                    \r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n      </AppBar>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Nav from './components/nav-bar/Nav'\r\nimport GlobalSummary from './components/global-summary/GlobalSummary';\r\nimport CountryDetailsContainer from './components/country-details/CountryDetailsContainer';\r\nimport Footer from './components/nav-bar/Footer';\r\n\r\nfunction App() {\r\n  const appTitlePrimary = 'Covid-19 Tracker';\r\n  const appTitleSecondary = 'Global'\r\n  \r\n  return (\r\n    <>\r\n      <Nav title={appTitlePrimary} sub={appTitleSecondary} />\r\n      <div style={{padding:'10px'}}>\r\n        <GlobalSummary />\r\n        <CountryDetailsContainer />\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","import {ACTION_TYPE} from '../../resources/const';\r\n\r\nconst INITIAL_STATE = {\r\n    countries: [],\r\n    summary: {},\r\n    details: []\r\n}\r\n\r\nexport default (state=INITIAL_STATE ,action)=>{\r\n    switch (action.type){\r\n        case ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME:\r\n            const data = action.payload;\r\n            const countries =  data.countries.map((country)=>{\r\n                return {\r\n                    text: country.name,\r\n                    key: country.iso2,\r\n                    value: country.iso3,\r\n                    flag: country.iso2 ? country.iso2.toLowerCase() : ''\r\n                }\r\n            });\r\n\r\n            state.countries=[...countries]\r\n            \r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_SUMMARY:\r\n            const confirmed = action.payload.confirmed.value;\r\n            const recovered = action.payload.recovered.value;\r\n            const deaths = action.payload.deaths.value;\r\n            const lastUpdated = `${new Date(action.payload.lastUpdate).toLocaleDateString()} ${new Date(action.payload.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n\r\n            state.summary ={\r\n                    confirmed,\r\n                    recovered,\r\n                    deaths,\r\n                    lastUpdated,\r\n                    recoverRatePercentage,\r\n                    deathRatePercentage\r\n                }\r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_DETAILS:\r\n            const details =  action.payload.map((country)=>{\r\n                return {\r\n                    combinedKey: country.combinedKey,\r\n                    confirmed: country.confirmed,\r\n                    active: country.active,\r\n                    deaths: country.deaths,\r\n                    incidentRate: country.incidentRate ? country.incidentRate.toFixed(2) : 0,\r\n                    lastUpdate: new Date(country.lastUpdate).toLocaleDateString()\r\n                }\r\n            });\r\n\r\n            state.details = details;\r\n\r\n            return {...state};\r\n        default:\r\n            return {...state};\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport countriesDetailsReducer from './countriesDetailsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    countryDetails : countriesDetailsReducer   \r\n});","import {ACTION_TYPE} from '../../resources/const';\r\n\r\n\r\nexport default (state=[],action)=>{\r\n    switch (action.type){\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n            const confirmed = action.payload.confirmed.value;\r\n            const recovered = action.payload.recovered.value;\r\n            const deaths = action.payload.deaths.value;\r\n            const lastUpdated = `${new Date(action.payload.lastUpdate).toLocaleDateString()} ${new Date(action.payload.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n\r\n            return {\r\n                confirmed,\r\n                recovered,\r\n                deaths,\r\n                lastUpdated,\r\n                recoverRatePercentage,\r\n                deathRatePercentage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}