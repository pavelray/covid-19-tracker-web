{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","components/nav-bar/Footer.js","apis/api.covid19api.js","apis/country.api.js","resources/const.js","apis/covid19.api.js","redux/actions/index.js","components/globalContent/GlobalStatsCard.js","resources/helper.js","components/UI/MapChart.js","components/globalContent/GlobalMap.js","components/globalContent/MostAffectedCountryCard.js","components/globalContent/GlobalStatsContainer.js","App.js","redux/reducer/globalDataReducer.js","redux/reducer/countriesDetailsReducer.js","redux/reducer/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","top","bottom","Footer","color","blue","backgroundColor","Container","maxWidth","padding","Grid","item","xs","Box","textAlign","gutterBottom","href","Date","getFullYear","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Api","get","response","type","payload","data","Title","GlobalStatsCard","this","global","totalConfirmed","totalDeaths","totalRecovered","newConfirmed","newDeaths","newRecovered","direction","level","gutter","sm","md","lg","flex","formatter","end","separator","valueStyle","span","text","recoverRatePercentage","deathRatePercentage","lastUpdated","Component","sortByProperty","property","b","formatNumber","num","toString","replace","MapChart","projectionConfig","rotate","scale","data-tip","countries","length","zoom","geography","geographies","map","geo","confirmed","d","find","s","code","properties","ISO_A2","recovered","deaths","key","rsmKey","values","fill","hover","outline","onMouseEnter","e","NAME","setTooltipContent","name","renderToolTipContent","onMouseLeave","GlobalMap","React","useState","content","setContent","console","log","MostAffectedCountryCard","renderMap","bordered","dataSource","slice","renderItem","country","Item","extra","percentage","toLowerCase","Text","minWidth","Content","Layout","GlobalStatsContainer","renderGlobalStats","renderMostAffectedCard","connect","state","bindActionCreators","TabPane","Tabs","renderTabBar","DefaultTabBar","App","sub","minHeight","defaultActiveKey","tabPosition","size","tab","INITIAL_STATE","summary","details","combineReducers","action","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Math","round","toLocaleDateString","toLocaleTimeString","Countries","Country","CountryCode","slug","Slug","percentageNumber","toFixed","sort","countriesList","countryDetails","iso2","value","iso3","flag","lastUpdate","combinedKey","active","incidentRate","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.644d04e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n     top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n  const color = blue[500];\r\n  return (\r\n   \r\n      <AppBar position=\"static\" className={classes.root} style={{backgroundColor: color , color: 'black'}}>\r\n        <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n            <Grid item xs={12}>\r\n                <Box style={{textAlign:'center'}}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom >\r\n                        Developed By <a href=\"https://github.com/pavelray\" style={{color: 'white'}}>#Ray</a> with <sub><FavoriteIcon /></sub> from India\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                       API Used - <a href=\"https://github.com/mathdroid/covid-19-api\" style={{color: 'white'}}>https://github.com/mathdroid/covid-19-api</a>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <CopyrightIcon/><sup>{new Date().getFullYear()}</sup> \r\n                    </Typography>\r\n                    \r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n      </AppBar>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19api.com'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/all'\r\n});","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRIES_NAME: 'FETCH_ALL_COUNTRIES_NAME',\r\n    FETCH_COUNTRY_SUMMARY: 'FETCH_COUNTRY_SUMMARY',\r\n    FETCH_COUNTRY_DETAILS: 'FETCH_COUNTRY_DETAILS',\r\n    FETCH_ALL_COUNTRY_SUMMARY: 'FETCH_ALL_COUNTRY_SUMMARY'\r\n}","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n            baseURL: 'https://covid19.mathdro.id/api'\r\n});","import country from \"../../apis/country.api\";\r\nimport covid19Api from '../../apis/api.covid19api';\r\nimport covid19Global from '../../apis/covid19.api';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\n// export const fetchGlobalData = () => async (dispatch, getState) => {\r\n//     await dispatch(fetchPost());\r\n\r\n//     const userIds = _.uniq(_.map(getState().posts,'userId'));\r\n//     userIds.forEach(id=> dispatch(fetchUser(id)));\r\n// }\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchAllCountrySummary = () => async dispatch => {\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY,\r\n        payload: response.data\r\n    });\r\n}\r\n\r\nexport const fetchCountrySummary = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_SUMMARY, payload: response.data});\r\n}\r\n\r\nexport const fetchCountryDetails = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}/confirmed`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_DETAILS, payload: response.data});\r\n}\r\n\r\nexport const fetchAllCountries = () => async dispatch =>{\r\n    const response = await covid19Global.get('/countries');\r\n    dispatch({type:ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME, payload: response.data});\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { Card, Statistic, Row, Col, Typography, Space,Badge, Tag  } from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport class GlobalStatsCard extends Component {\r\n\r\n    render() {\r\n        \r\n        const {totalConfirmed,totalDeaths,totalRecovered,newConfirmed,newDeaths,newRecovered} = this.props.global;\r\n\r\n        return (\r\n        <Card>\r\n            <Space direction=\"vertical\">\r\n            <Title level={4}>Global Stats</Title>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Confirmed\"\r\n                    formatter={()=><CountUp end={totalConfirmed?totalConfirmed:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'orange' }}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Recovered\"\r\n                    formatter={()=><CountUp end={totalRecovered?totalRecovered:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'green' }}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Deaths\"\r\n                    formatter={()=><CountUp end={totalDeaths?totalDeaths:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'red' }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col flex=\"auto\">\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <h4>Today</h4>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                           <Badge color=\"orange\" text=\"Confirmed\" />: <CountUp end={newConfirmed?newConfirmed:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"green\" text=\"Recovered\" />: <CountUp end={newRecovered?newRecovered:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"red\" text=\"Deaths\" />: <CountUp end={newDeaths?newDeaths:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                            <Tag color=\"green\">{this.props.recoverRatePercentage}</Tag>\r\n                            <Tag color=\"volcano\">{this.props.deathRatePercentage}</Tag>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                           <Tag color=\"default\">Last Updated On : {this.props.lastUpdated}</Tag>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            </Space>\r\n        </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GlobalStatsCard\r\n","import React from 'react';\r\nimport { Row, Col, Badge  } from 'antd';\r\n\r\n\r\nexport function sortByProperty(property) {\r\n    return function (a, b) {\r\n        if (a[property] > b[property])\r\n            return -1;\r\n        else if (a[property] < b[property])\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function LightenDarkenColor(col, amt) {\r\n    col = parseInt(col, 16);\r\n    return `#${(((col & 0x0000FF) + amt) | ((((col >> 8) & 0x00FF) + amt) << 8) | (((col >> 16) + amt) << 16)).toString(16)}`;\r\n}\r\n\r\n\r\nexport const generateFillColor = (confirmed) => {\r\n    let colorScale = '#b30000';\r\n\r\n    if (confirmed <= 99) {\r\n        colorScale = '#ff8080';\r\n    } \r\n    else if (100 <= confirmed && confirmed <= 999) {\r\n        colorScale = '#ff4d4d';\r\n    } \r\n    else if (1000 <= confirmed && confirmed <= 9999) {\r\n        colorScale = '#ff1a1a'\r\n        \r\n    } \r\n    else if (10000 <= confirmed && confirmed <= 49999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else if (50000 <= confirmed && confirmed <= 99999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else {\r\n        colorScale = '#800000'\r\n    }\r\n\r\n    return colorScale;\r\n}\r\n\r\nexport const renderToolTipContent = (name,confirmed,recovered,deaths) =>{\r\n    return(\r\n        <Row>\r\n            <Col flex=\"auto\" style={{maxWidth:'150px'}}>\r\n                <Row>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        {name}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"orange\" text=\"Confirmed\" />: {formatNumber(confirmed)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"green\" text=\"Recovered\" />: {formatNumber(recovered)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"red\" text=\"Deaths\" />: {formatNumber(deaths)}\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\n// TEST\r\n","import React from \"react\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Sphere,\r\n  Graticule,\r\n  ZoomableGroup\r\n} from \"react-simple-maps\";\r\nimport {generateFillColor,renderToolTipContent} from '../../resources/helper';\r\n\r\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n\r\n\r\n\r\nexport const MapChart = (props) => {\r\n\r\n    return (\r\n      <>\r\n      <ComposableMap projectionConfig={{rotate: [-10, 0, 0],scale: 180}} data-tip=\"\">\r\n      {\r\n        props.countries.length > 0 && (\r\n          <ZoomableGroup zoom={1} >\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const d = props.countries.find(s => s.code === geo.properties.ISO_A2);\r\n                  geo.confirmed = d? d.confirmed: 0;\r\n                  geo.recovered = d ? d.recovered : 0;\r\n                  geo.deaths = d? d.deaths:0;\r\n\r\n                  return (\r\n                    <Geography key={geo.rsmKey} geography={geo}\r\n                      values={d?d.confirmed:0}\r\n                      fill={d ? generateFillColor(d.confirmed) : \"#F5F4F6\"}\r\n                      style={{hover: {fill: \"#F53\", outline: \"none\"}}}\r\n                      onMouseEnter={(e) => {\r\n                        const { NAME, confirmed, recovered,deaths } = geo.properties;\r\n                        props.setTooltipContent(renderToolTipContent(NAME, geo.confirmed, geo.recovered, geo.deaths));\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        props.setTooltipContent(``);\r\n                      }}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        )}\r\n\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","import React, { Component } from 'react'\r\nimport MapChart from '../UI/MapChart';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { Typography , Tag} from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\n\r\n\r\nfunction GlobalMap(props) {\r\n    const [content, setContent] = React.useState(\"\");\r\n    console.log(content);\r\n    if (props.countries.length > 0) {\r\n        return (\r\n        <div>\r\n            <Title level={4}>World Map</Title>\r\n            <MapChart countries={props.countries} totalConfirmed={props.totalConfirmed} setTooltipContent={setContent}/>\r\n            <ReactTooltip backgroundColor=\"white\">{content}</ReactTooltip>\r\n\r\n            <Tag color=\"#ff8080\">1 to 99</Tag>\r\n            <Tag color=\"#ff4d4d\">100 to 999</Tag>\r\n            <Tag color=\"#ff1a1a\">1000 to 9999</Tag>\r\n            <Tag color=\"#e60000\">10000 to 49999</Tag>\r\n            <Tag color=\"#b30000\">50000 to 99999</Tag>\r\n            <Tag color=\"#800000\">100000+</Tag>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n    else{\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nexport default GlobalMap\r\n","import React, { Component } from 'react';\r\nimport { Card, List, Tag ,Statistic, Row, Col, Typography, Space,Badge  } from 'antd';\r\nimport GlobalMap from './GlobalMap';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport class MostAffectedCountryCard extends Component {\r\n\r\n\r\n    renderMap = () =>{\r\n        return(\r\n            <GlobalMap countries={this.props.countries} totalConfirmed={this.props.totalConfirmed} / >\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {countries} = this.props;\r\n        return (\r\n            <Card>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                    <Title level={4}>Most Affected Countires</Title>\r\n                        <List\r\n                            bordered={false}\r\n                            dataSource={countries.slice(0,10)}\r\n                            renderItem={country => (\r\n                                <List.Item extra={country.percentage} key={country.code.toLowerCase()}>\r\n                                    <Typography.Text>{country.name}</Typography.Text> \r\n                                </List.Item>\r\n                            )}\r\n                        /> \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\" style={{minWidth:'200px'}}>\r\n                        {this.renderMap()}\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MostAffectedCountryCard\r\n","import React, { Component } from 'react';\r\n\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport GlobalStatsCard from './GlobalStatsCard';\r\nimport MostAffectedCountryCard from './MostAffectedCountryCard';\r\nimport GlobalMap from './GlobalMap';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class GlobalStatsContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchGlobalData();\r\n    }\r\n\r\n    renderGlobalStats =()=>{\r\n        if (this.props.global){\r\n            const {global,recoverRatePercentage,deathRatePercentage,lastUpdated} = this.props;\r\n            return(\r\n                <GlobalStatsCard global={global} recoverRatePercentage={recoverRatePercentage} \r\n                        deathRatePercentage={deathRatePercentage} lastUpdated={lastUpdated} / >\r\n            )\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    renderMostAffectedCard =() =>{\r\n        if(this.props.global){\r\n             const {countries} = this.props;\r\n             return(<MostAffectedCountryCard countries={countries} totalConfirmed={this.props.global.totalConfirmed} / >)\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Content>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    {this.renderGlobalStats()}\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"5\">\r\n                    {this.renderMostAffectedCard()}\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\nconsole.log(state);\r\n  return {\r\n    global : {...state.global.global},\r\n    recoverRatePercentage: state.global.recoverRatePercentage,\r\n    deathRatePercentage: state.global.deathRatePercentage,\r\n    lastUpdated: state.global.lastUpdated,\r\n    countries: state.global.countries\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalStatsContainer)\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport Footer from './components/nav-bar/Footer';\nimport 'antd/dist/antd.css';\nimport { Layout, Row, Col } from 'antd';\nimport GlobalStatsContainer from './components/globalContent/GlobalStatsContainer';\n\nimport { Tabs } from 'antd';\n\nconst { TabPane } = Tabs;\n\nconst renderTabBar = (props, DefaultTabBar) => (\n  <DefaultTabBar {...props} className=\"site-custom-tab-bar\" />\n);\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n     <Layout>\n       <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n        <div style={{padding:'10px', minHeight: '90vh'}} >\n          <Tabs defaultActiveKey=\"1\" tabPosition='top' size=\"large\" renderTabBar={renderTabBar}>\n            <TabPane tab=\"Global\" key=\"1\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col className=\"gutter-row\" span={24}>\n                    <GlobalStatsContainer/>\n                  </Col>\n                 </Row>\n            </TabPane>\n            <TabPane tab=\"India\" key=\"2\">\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col className=\"gutter-row\" span={24}>\n                  <h3>Work in Progress</h3>\n                </Col>\n              </Row>\n            </TabPane>\n          </Tabs>\n        </div>\n        <Footer />\n    </Layout>\n  );\n\n}\n\nexport default App;\n","import {ACTION_TYPE} from '../../resources/const';\r\nimport {sortByProperty} from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    global: {},\r\n    countries: [],\r\n    recoverRatePercentage: '',\r\n    deathRatePercentage: '',\r\n    lastUpdated: '',\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n            const data = action.payload.Global;\r\n            const global = {\r\n                newConfirmed: data.NewConfirmed,\r\n                totalConfirmed: data.TotalConfirmed,\r\n                newDeaths: data.NewDeaths,\r\n                totalDeaths: data.TotalDeaths,\r\n                newRecovered: data.NewRecovered,\r\n                totalRecovered: data.TotalRecovered\r\n            }\r\n\r\n            state.recoverRatePercentage = `${Math.round((global.totalRecovered / global.totalConfirmed) * 100)} % Recoverey Rate`;\r\n            state.deathRatePercentage = `${Math.round((global.totalDeaths / global.totalConfirmed) * 100)} % Fatality Rate`;\r\n            state.lastUpdated = `${new Date(action.payload.Date).toLocaleDateString()} ${new Date(action.payload.Date).toLocaleTimeString()}`;\r\n            state.global = global\r\n\r\n            const countries = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentageNumber: ((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2),\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countries.sort(sortByProperty('confirmed'));\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n       \r\n        case ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY:\r\n\r\n            const countriesList = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countriesList.sort(sortByProperty('confirmed'));\r\n            \r\n        return {...state};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ACTION_TYPE} from '../../resources/const';\r\n\r\nconst INITIAL_STATE = {\r\n    countries: [],\r\n    summary: {},\r\n    details: []\r\n}\r\n\r\nexport default (state=INITIAL_STATE ,action)=>{\r\n    switch (action.type){\r\n        case ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME:\r\n            const data = action.payload;\r\n            const countries =  data.countries.map((country)=>{\r\n                return {\r\n                    text: country.name,\r\n                    key: country.iso2,\r\n                    value: country.iso3,\r\n                    flag: country.iso2 ? country.iso2.toLowerCase() : ''\r\n                }\r\n            });\r\n\r\n            state.countries=[...countries]\r\n            \r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_SUMMARY:\r\n            const confirmed = action.payload.confirmed.value;\r\n            const recovered = action.payload.recovered.value;\r\n            const deaths = action.payload.deaths.value;\r\n            const lastUpdated = `${new Date(action.payload.lastUpdate).toLocaleDateString()} ${new Date(action.payload.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n\r\n            state.summary ={\r\n                    confirmed,\r\n                    recovered,\r\n                    deaths,\r\n                    lastUpdated,\r\n                    recoverRatePercentage,\r\n                    deathRatePercentage\r\n                }\r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_DETAILS:\r\n            const details =  action.payload.map((country)=>{\r\n                return {\r\n                    combinedKey: country.combinedKey,\r\n                    confirmed: country.confirmed,\r\n                    active: country.active,\r\n                    deaths: country.deaths,\r\n                    incidentRate: country.incidentRate ? country.incidentRate.toFixed(2) : 0,\r\n                    lastUpdate: new Date(country.lastUpdate).toLocaleDateString()\r\n                }\r\n            });\r\n\r\n            state.details = details;\r\n\r\n            return {...state};\r\n        default:\r\n            return {...state};\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport countriesDetailsReducer from './countriesDetailsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    countryDetails : countriesDetailsReducer   \r\n});","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}