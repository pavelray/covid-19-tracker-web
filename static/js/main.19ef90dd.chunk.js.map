{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","components/nav-bar/Footer.js","apis/api.covid19api.js","apis/api.covid19India.js","resources/const.js","redux/actions/index.js","components/UI/StatsSummaryCard.js","components/globalContent/GlobalStatsCard.js","resources/helper.js","components/UI/MapChart.js","components/globalContent/GlobalMap.js","components/globalContent/MostAffectedCountryCard.js","components/globalContent/GlobalStatsContainer.js","components/india-stats/IndiaStatesSummaryTable.js","components/UI/SimpleLineChart.js","components/india-stats/IndiaStatsChart.js","components/india-stats/IndiaStatsContainer.js","App.js","redux/reducer/globalDataReducer.js","redux/reducer/indiaStatsReducer.js","redux/reducer/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","color","top","bottom","Footer","blue","backgroundColor","Container","maxWidth","padding","Grid","item","xs","Box","textAlign","gutterBottom","href","Date","getFullYear","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Api","get","response","type","payload","data","Title","StatsSummaryCard","totalConfirmed","totalRecovered","totalDeaths","newConfirmed","newRecovered","newDeaths","totalActive","recoverRatePercentage","deathRatePercentage","lastUpdated","direction","level","gutter","sm","md","lg","flex","formatter","end","separator","valueStyle","span","text","GlobalStatsCard","renderGlobalStatsCard","statsSummary","global","this","Component","sortByProperty","property","b","formatNumber","num","toString","replace","MapChart","projectionConfig","rotate","scale","data-tip","countries","length","zoom","geography","geographies","map","geo","confirmed","d","find","s","code","properties","ISO_A2","recovered","deaths","key","rsmKey","values","fill","hover","outline","onMouseEnter","e","NAME","setTooltipContent","name","renderToolTipContent","onMouseLeave","GlobalMap","React","useState","content","setContent","MostAffectedCountryCard","renderMap","bordered","dataSource","slice","renderItem","country","Item","extra","percentage","toLowerCase","Text","minWidth","Content","Layout","GlobalStatsContainer","renderGlobalStats","renderMostAffectedCard","connect","state","bindActionCreators","IndiaStatesSummaryTable","columns","dataIndex","fixed","ellipsis","responsive","render","value","renderDeltaInfo","record","deltaconfirmed","deltarecovered","deltadeaths","lastupdatedtime","allStates","size","expandable","expandedRowRender","SimpleLineChart","field","categoryField","category","markers","visible","baseUnit","IndiaStatsChart","console","log","IndiaStatsContainer","renderStatsSummary","summary","active","Math","round","renderStateSummaryTable","fetchIndiaStateSummary","chatDataCategory","chartDataConfirmed","indiaData","casesTimeSeriesChartDataCategory","casesTimeSeriesChartDataConfirmed","covid19IndiaApi","TabPane","Tabs","renderTabBar","DefaultTabBar","App","sub","minHeight","defaultActiveKey","tabPosition","tab","INITIAL_STATE","casesTimeSeriesChartData","combineReducers","action","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","toLocaleDateString","toLocaleTimeString","Countries","Country","CountryCode","slug","Slug","percentageNumber","toFixed","sort","countriesList","count","statewise","cases_time_series","series","date","setYear","parseInt","totalconfirmed","totaldeceased","totalrecovered","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19ef90dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px' , color: 'white'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n     top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n  const color = blue[500];\r\n  return (\r\n   \r\n      <AppBar position=\"static\" className={classes.root} style={{backgroundColor: color , color: 'black'}}>\r\n        <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n            <Grid item xs={12}>\r\n                <Box style={{textAlign:'center'}}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom >\r\n                        Developed By <a href=\"https://github.com/pavelray\" style={{color: 'white'}}>#Ray</a>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <CopyrightIcon/><sup>{new Date().getFullYear()}</sup> \r\n                    </Typography>\r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n      </AppBar>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19api.com'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19india.org'\r\n});\r\n","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRY_SUMMARY: 'FETCH_ALL_COUNTRY_SUMMARY',\r\n    FETCH_INDIA_STATE_SUMMARY: 'FETCH_INDIA_STATE_SUMMARY',\r\n}","import covid19Api from '../../apis/api.covid19api';\r\nimport covid19IndiaApi from '../../apis/api.covid19India';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchIndiaStateSummary = () => async dispatch =>{\r\n    const response = await covid19IndiaApi.get('/data.json');\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY,\r\n        payload: response.data\r\n    });\r\n}\r\n\r\n","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { Card, Statistic, Row, Col, Typography, Space,Badge, Tag  } from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport const StatsSummaryCard = (props) =>{\r\n    const {\r\n        totalConfirmed,\r\n        totalRecovered,\r\n        totalDeaths,\r\n        newConfirmed,\r\n        newRecovered,\r\n        newDeaths,\r\n        totalActive,\r\n        recoverRatePercentage,\r\n        deathRatePercentage,\r\n        lastUpdated\r\n    } = props;\r\n\r\n    return (\r\n        <Card>\r\n            <Space direction=\"vertical\">\r\n            <Title level={4}>{props.title}</Title>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Confirmed\"\r\n                    formatter={()=><CountUp end={totalConfirmed?totalConfirmed:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'orange' }}\r\n                    />\r\n                </Col>\r\n                {totalActive && <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Active\"\r\n                    formatter={()=><CountUp end={totalActive?totalActive:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'volcano' }}\r\n                    />\r\n                </Col>}\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Recovered\"\r\n                    formatter={()=><CountUp end={totalRecovered?totalRecovered:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'green' }}\r\n                    />\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    <Statistic\r\n                    title=\"Deaths\"\r\n                    formatter={()=><CountUp end={totalDeaths?totalDeaths:0} separator =\",\"/>}\r\n                    valueStyle={{ color: 'red' }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col flex=\"auto\">\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <h4>Today</h4>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                           <Badge color=\"orange\" text=\"Confirmed\" />: <CountUp end={newConfirmed?newConfirmed:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"green\" text=\"Recovered\" />: <CountUp end={newRecovered?newRecovered:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col flex=\"auto\">\r\n                            <Badge color=\"red\" text=\"Deaths\" />: <CountUp end={newDeaths?newDeaths:0} separator =\",\"/>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                            <Tag color=\"green\">{recoverRatePercentage}</Tag>\r\n                            <Tag color=\"volcano\">{deathRatePercentage}</Tag>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br/>\r\n                           <Tag color=\"default\">Last Updated On : {lastUpdated}</Tag>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            </Space>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StatsSummaryCard;\r\n","import React, { Component } from 'react';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\n\r\nexport class GlobalStatsCard extends Component {\r\n\r\n    renderGlobalStatsCard=()=>{\r\n        \r\n        const statsSummary = {\r\n            ...this.props.global,\r\n            ...this.props\r\n        }\r\n\r\n        return(\r\n            <StatsSummaryCard {...statsSummary}  title='Global Stats' /> \r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderGlobalStatsCard()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GlobalStatsCard\r\n","import React from 'react';\r\nimport { Row, Col, Badge  } from 'antd';\r\n\r\n\r\nexport function sortByProperty(property) {\r\n    return function (a, b) {\r\n        if (a[property] > b[property])\r\n            return -1;\r\n        else if (a[property] < b[property])\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function LightenDarkenColor(col, amt) {\r\n    col = parseInt(col, 16);\r\n    return `#${(((col & 0x0000FF) + amt) | ((((col >> 8) & 0x00FF) + amt) << 8) | (((col >> 16) + amt) << 16)).toString(16)}`;\r\n}\r\n\r\n\r\nexport const generateFillColor = (confirmed) => {\r\n    let colorScale = '#b30000';\r\n\r\n    if (confirmed===0){\r\n        colorScale = '#ffede5';\r\n    }\r\n    else if (0 <= confirmed && confirmed <= 99) {\r\n        colorScale = '#ff8080';\r\n    } \r\n    else if (100 <= confirmed && confirmed <= 999) {\r\n        colorScale = '#ff4d4d';\r\n    } \r\n    else if (1000 <= confirmed && confirmed <= 9999) {\r\n        colorScale = '#ff1a1a'\r\n        \r\n    } \r\n    else if (10000 <= confirmed && confirmed <= 49999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else if (50000 <= confirmed && confirmed <= 99999) {\r\n        colorScale = '#e60000'\r\n    }\r\n    else {\r\n        colorScale = '#800000'\r\n    }\r\n\r\n    return colorScale;\r\n}\r\n\r\nexport const renderToolTipContent = (name,confirmed,recovered,deaths) =>{\r\n    return(\r\n        <Row>\r\n            <Col flex=\"auto\" style={{maxWidth:'150px'}}>\r\n                <Row>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        {name}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"orange\" text=\"Confirmed\" />: {formatNumber(confirmed)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"green\" text=\"Recovered\" />: {formatNumber(recovered)}\r\n                    </Col>\r\n                    <Col span={24} style={{color:'black'}}>\r\n                        <Badge color=\"red\" text=\"Deaths\" />: {formatNumber(deaths)}\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport function formatNumber(num) {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\n// TEST\r\n","import React from \"react\";\r\n\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  ZoomableGroup\r\n} from \"react-simple-maps\";\r\nimport {generateFillColor,renderToolTipContent} from '../../resources/helper';\r\n\r\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n\r\n\r\n\r\nexport const MapChart = (props) => {\r\n\r\n    return (\r\n      <>\r\n      <ComposableMap projectionConfig={{rotate: [-10, 0, 0],scale: 180}} data-tip=\"\">\r\n      {\r\n        props.countries.length > 0 && (\r\n          <ZoomableGroup zoom={1} >\r\n            <Geographies geography={geoUrl}>\r\n              {({ geographies }) =>\r\n                geographies.map(geo => {\r\n                  const d = props.countries.find(s => s.code === geo.properties.ISO_A2);\r\n                  geo.confirmed = d? d.confirmed: 0;\r\n                  geo.recovered = d ? d.recovered : 0;\r\n                  geo.deaths = d? d.deaths:0;\r\n\r\n                  return (\r\n                    <Geography key={geo.rsmKey} geography={geo}\r\n                      values={d?d.confirmed:0}\r\n                      fill={d ? generateFillColor(d.confirmed) : \"#f8f8ff\"}\r\n                      style={{hover: {fill: \"#F53\", outline: \"none\"}}}\r\n                      onMouseEnter={(e) => {\r\n                        const { NAME} = geo.properties;\r\n                        props.setTooltipContent(renderToolTipContent(NAME, geo.confirmed, geo.recovered, geo.deaths));\r\n                      }}\r\n                      onMouseLeave={() => {\r\n                        props.setTooltipContent(``);\r\n                      }}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n            </Geographies>\r\n          </ZoomableGroup>\r\n        )}\r\n\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","import React, { Component } from 'react'\r\nimport MapChart from '../UI/MapChart';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { Typography , Tag} from 'antd';\r\n\r\nconst { Title  } = Typography\r\n\r\n\r\n\r\nfunction GlobalMap(props) {\r\n    const [content, setContent] = React.useState(\"\");\r\n    \r\n    if (props.countries.length > 0) {\r\n        return (\r\n        <div>\r\n            <Title level={4}>World Map</Title>\r\n            <MapChart countries={props.countries} totalConfirmed={props.totalConfirmed} setTooltipContent={setContent}/>\r\n            <ReactTooltip backgroundColor=\"white\">{content}</ReactTooltip>\r\n\r\n            <Tag color=\"#ff8080\">1 to 99</Tag>\r\n            <Tag color=\"#ff4d4d\">100 to 999</Tag>\r\n            <Tag color=\"#ff1a1a\">1,000 to 9,999</Tag>\r\n            <Tag color=\"#e60000\">10,000 to 49,999</Tag>\r\n            <Tag color=\"#b30000\">50,000 to 99,999</Tag>\r\n            <Tag color=\"#800000\">100,000+</Tag>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n    else{\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nexport default GlobalMap\r\n","import React, { Component } from 'react';\r\nimport { Card, List, Tag ,Statistic, Row, Col, Typography, Space,Badge  } from 'antd';\r\nimport GlobalMap from './GlobalMap';\r\n\r\nconst { Title  } = Typography\r\n\r\nexport class MostAffectedCountryCard extends Component {\r\n\r\n\r\n    renderMap = () =>{\r\n        return(\r\n            <GlobalMap countries={this.props.countries} totalConfirmed={this.props.totalConfirmed} / >\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {countries} = this.props;\r\n        return (\r\n            <Card>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                    <Title level={4}>Most Affected Countires</Title>\r\n                        <List\r\n                            bordered={false}\r\n                            dataSource={countries.slice(0,10)}\r\n                            renderItem={country => (\r\n                                <List.Item extra={country.percentage} key={country.code.toLowerCase()}>\r\n                                    <Typography.Text>{country.name}</Typography.Text> \r\n                                </List.Item>\r\n                            )}\r\n                        /> \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\" style={{minWidth:'200px'}}>\r\n                        {this.renderMap()}\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MostAffectedCountryCard\r\n","import React, { Component } from 'react';\r\n\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport GlobalStatsCard from './GlobalStatsCard';\r\nimport MostAffectedCountryCard from './MostAffectedCountryCard';\r\nimport GlobalMap from './GlobalMap';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class GlobalStatsContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchGlobalData();\r\n    }\r\n\r\n    renderGlobalStats =()=>{\r\n        if (this.props.global){\r\n            const {global,recoverRatePercentage,deathRatePercentage,lastUpdated} = this.props;\r\n            return(\r\n                <GlobalStatsCard global={global} recoverRatePercentage={recoverRatePercentage} \r\n                        deathRatePercentage={deathRatePercentage} lastUpdated={lastUpdated} / >\r\n            )\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    renderMostAffectedCard =() =>{\r\n        if(this.props.global){\r\n             const {countries} = this.props;\r\n             return(<MostAffectedCountryCard countries={countries} totalConfirmed={this.props.global.totalConfirmed} / >)\r\n        }\r\n        else{\r\n            return(<></>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Content>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                <Col className=\"gutter-row\" flex=\"2\">\r\n                    {this.renderGlobalStats()}\r\n                </Col>\r\n                <Col className=\"gutter-row\" flex=\"5\">\r\n                    {this.renderMostAffectedCard()}\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    global : {...state.global.global},\r\n    recoverRatePercentage: state.global.recoverRatePercentage,\r\n    deathRatePercentage: state.global.deathRatePercentage,\r\n    lastUpdated: state.global.lastUpdated,\r\n    countries: state.global.countries\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalStatsContainer)\r\n","import React, { Component } from 'react';\r\nimport {formatNumber} from '../../resources/helper';\r\n\r\nimport { Table, Tag, Row, Col, Badge } from 'antd';\r\n\r\nexport class IndiaStatesSummaryTable extends Component {\r\n    \r\n    columns = [\r\n    {\r\n        title: 'State',\r\n        dataIndex: 'state',\r\n        key: 'state',\r\n        fixed: 'left',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render: text => <label>{text}</label>,\r\n    },\r\n    {\r\n        title: 'Confirmed',\r\n        dataIndex: 'confirmed',\r\n        key: 'confirmed',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='orange' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Active',\r\n        dataIndex: 'active',\r\n        key: 'active',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='volcano' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Recovered',\r\n        key: 'recovered',\r\n        dataIndex: 'recovered',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='green' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    {\r\n        title: 'Deaths',\r\n        key: 'deaths',\r\n        dataIndex: 'deaths',\r\n        ellipsis: true,\r\n        responsive: ['md'],\r\n        render:  value => (<Tag color='red' key={value}>{formatNumber(value)}</Tag>),\r\n    },\r\n    \r\n];\r\n\r\n    renderDeltaInfo = (record) => {\r\n        return (\r\n            <div style={{padding:'10px'}}>\r\n                <label>{record.state}</label>\r\n                <br/>\r\n                <Badge color=\"orange\" text=\"New Confrimed\" />:&nbsp;{record.deltaconfirmed}\r\n                <br/>\r\n                <Badge color=\"green\" text=\"New Recovered\" />:&nbsp;{record.deltarecovered}\r\n                <br/>\r\n                <Badge color=\"red\" text=\"New Deaths\" />:&nbsp;{record.deltadeaths}\r\n                <br/>\r\n                <label>Last Updated:&nbsp;{record.lastupdatedtime}</label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Row>\r\n                <Col flex=\"1\">\r\n                    <Table columns={this.columns} dataSource={this.props.allStates} size=\"small\"\r\n                        expandable={{\r\n                            expandedRowRender: record => (this.renderDeltaInfo(record))\r\n                        }}\r\n                        title={() => 'State Wise Stats'}/>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatesSummaryTable\r\n","import React from 'react';\r\n\r\nimport {\r\n    Chart,\r\n    ChartTitle,\r\n    ChartSeries,\r\n    ChartSeriesItem,\r\n    ChartCategoryAxis,\r\n    ChartCategoryAxisItem\r\n} from '@progress/kendo-react-charts';\r\n\r\nexport const SimpleLineChart= (props) => {\r\n    return (\r\n        <Chart>\r\n            <ChartTitle text={props.title} />\r\n            <ChartSeries>\r\n                <ChartSeriesItem\r\n                    name=\"Confirmed\"\r\n                    type=\"line\" \r\n                    field=\"confirmed\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Recovered\"\r\n                    type=\"line\"\r\n                    field=\"deaths\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n                <ChartSeriesItem\r\n                    name=\"Deaths\"\r\n                    type=\"line\"\r\n                    field=\"recovered\"\r\n                    categoryField=\"date\"\r\n                    data={props.category}\r\n                    markers={{ visible: false }}\r\n                />\r\n            </ChartSeries>\r\n            <ChartCategoryAxis>\r\n                <ChartCategoryAxisItem baseUnit=\"fit\" />\r\n            </ChartCategoryAxis>\r\n        </Chart>\r\n    );\r\n}\r\n\r\nexport default SimpleLineChart","import React, { Component } from 'react';\r\nimport SimpleLineChart from '../UI/SimpleLineChart';\r\nimport { Card } from 'antd';\r\n\r\nexport class IndiaStatsChart extends Component {\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        return (\r\n            <Card>\r\n                <SimpleLineChart category={this.props.category} confirmed={this.props.confirmed} title=\"Day Wise Stats\" />\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndiaStatsChart\r\n","import React, { Component } from 'react'\r\nimport {fetchIndiaStateSummary} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\nimport { Layout, Row, Col } from 'antd';\r\nimport IndiaStatesSummaryTable from './IndiaStatesSummaryTable';\r\nimport StatsSummaryCard from '../UI/StatsSummaryCard';\r\nimport IndiaStatsChart from './IndiaStatsChart';\r\n\r\nconst { Content } = Layout;\r\n\r\nexport class IndiaStatsContainer extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchIndiaStateSummary();\r\n    }\r\n\r\n    renderStatsSummary = () =>{\r\n\r\n        const statsSummary = {\r\n            totalConfirmed: this.props.summary.confirmed,\r\n            totalRecovered: this.props.summary.recovered,\r\n            totalDeaths: this.props.summary.deaths,\r\n            newConfirmed: this.props.summary.deltaconfirmed,\r\n            newRecovered: this.props.summary.deltarecovered,\r\n            newDeaths: this.props.summary.deltadeaths,\r\n            totalActive: this.props.summary.active,\r\n            recoverRatePercentage: `${Math.round((this.props.summary.recovered / this.props.summary.confirmed) * 100)} % Recoverey Rate`,\r\n            deathRatePercentage: `${Math.round((this.props.summary.deaths / this.props.summary.confirmed) * 100)} % Fatality Rate`,\r\n            lastUpdated: this.props.summary.lastupdatedtime,\r\n        }\r\n        return(\r\n            <>\r\n                <StatsSummaryCard {...statsSummary}  title='India Stats'/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderStateSummaryTable = () =>{\r\n        return(\r\n            <IndiaStatesSummaryTable allStates={this.props.allStates}/>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Content>\r\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                    <Col className=\"gutter-row\" span={24} flex=\"1\">\r\n                        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                            <Col flex=\"3\" className=\"gutter-row\">\r\n                                {this.renderStatsSummary()}\r\n                            </Col>\r\n                            <Col flex=\"auto\" className=\"gutter-row\">\r\n                               <IndiaStatsChart category={this.props.chatDataCategory} \r\n                                    confirmed={this.props.chartDataConfirmed}/>\r\n                            </Col>\r\n                        </Row>\r\n                        \r\n                    </Col>\r\n                    <Col className=\"gutter-row\" flex=\"auto\">\r\n                        {this.renderStateSummaryTable()}\r\n                    </Col>\r\n                </Row>\r\n            </Content>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n\r\n    return{\r\n            allStates: state.indiaData.allStates.slice(1, state.indiaData.allStates.length),\r\n            summary: {\r\n                ...state.indiaData.allStates.slice(0,1)[0]\r\n            },\r\n            chatDataCategory: state.indiaData.casesTimeSeriesChartDataCategory,\r\n            chartDataConfirmed: state.indiaData.casesTimeSeriesChartDataConfirmed\r\n        }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchIndiaStateSummary})(IndiaStatsContainer)\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport Footer from './components/nav-bar/Footer';\nimport 'antd/dist/antd.css';\nimport { Layout, Row, Col } from 'antd';\nimport GlobalStatsContainer from './components/globalContent/GlobalStatsContainer';\n\nimport { Tabs } from 'antd';\nimport IndiaStatsContainer from './components/india-stats/IndiaStatsContainer';\nimport '@progress/kendo-theme-default/dist/all.css';\n\n\nconst { TabPane } = Tabs;\n\nconst renderTabBar = (props, DefaultTabBar) => (\n  <DefaultTabBar {...props} className=\"site-custom-tab-bar\" />\n);\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n     <Layout>\n       <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n        <div style={{padding:'10px', minHeight: '90vh'}} >\n          <Tabs defaultActiveKey=\"1\" tabPosition='top' size=\"large\" renderTabBar={renderTabBar}>\n            <TabPane tab=\"Global\" key=\"1\">\n                <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                  <Col className=\"gutter-row\" span={24}>\n                    <GlobalStatsContainer/>\n                  </Col>\n                 </Row>\n            </TabPane>\n            <TabPane tab=\"India\" key=\"2\">\n              <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                <Col className=\"gutter-row\" span={24}>\n                  <IndiaStatsContainer />\n                </Col>\n              </Row>\n            </TabPane>\n          </Tabs>\n        </div>\n        <Footer />\n    </Layout>\n  );\n\n}\n\nexport default App;\n","import {ACTION_TYPE} from '../../resources/const';\r\nimport {sortByProperty} from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    global: {},\r\n    countries: [],\r\n    recoverRatePercentage: '',\r\n    deathRatePercentage: '',\r\n    lastUpdated: '',\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n            const data = action.payload.Global;\r\n            const global = {\r\n                newConfirmed: data.NewConfirmed,\r\n                totalConfirmed: data.TotalConfirmed,\r\n                newDeaths: data.NewDeaths,\r\n                totalDeaths: data.TotalDeaths,\r\n                newRecovered: data.NewRecovered,\r\n                totalRecovered: data.TotalRecovered\r\n            }\r\n\r\n            state.recoverRatePercentage = `${Math.round((global.totalRecovered / global.totalConfirmed) * 100)} % Recoverey Rate`;\r\n            state.deathRatePercentage = `${Math.round((global.totalDeaths / global.totalConfirmed) * 100)} % Fatality Rate`;\r\n            state.lastUpdated = `${new Date(action.payload.Date).toLocaleDateString()} ${new Date(action.payload.Date).toLocaleTimeString()}`;\r\n            state.global = global\r\n\r\n            const countries = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentageNumber: ((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2),\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countries.sort(sortByProperty('confirmed'));\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n       \r\n        case ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY:\r\n\r\n            const countriesList = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countriesList.sort(sortByProperty('confirmed'));\r\n            \r\n        return {...state};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { ACTION_TYPE } from '../../resources/const';\r\nimport { sortByProperty } from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    allStates: [],\r\n    casesTimeSeriesChartData: [],\r\n    casesTimeSeriesChartDataConfirmed: []\r\n    \r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.FETCH_INDIA_STATE_SUMMARY:\r\n            let count = 0;\r\n            //state.allStates = action.payload.statewise;\r\n            state.allStates = action.payload.statewise.map((state) => {\r\n                count++;\r\n                return{\r\n                    key: count,\r\n                    ...state\r\n                }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataCategory = action.payload.cases_time_series.map((series)=>{\r\n                return {\r\n                        date: new Date(new Date(series.date).setYear('2020')),\r\n                        confirmed: parseInt(series.totalconfirmed),\r\n                        deaths: parseInt(series.totaldeceased),\r\n                        recovered: parseInt(series.totalrecovered)\r\n                    }\r\n            });\r\n\r\n            state.casesTimeSeriesChartDataConfirmed = action.payload.cases_time_series.map((series) => {\r\n                return series.totalconfirmed\r\n            });\r\n\r\n            return {\r\n                ...state\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport indiaStatsReducer from './indiaStatsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    indiaData: indiaStatsReducer,\r\n});","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}