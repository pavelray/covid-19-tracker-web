{"version":3,"sources":["components/nav-bar/Nav.js","apis/covid19.api.js","components/UI/Cards.js","components/global-summary/GlobalSummary.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","title","axios","create","baseURL","Cards","color","category","count","ratePercentage","style","height","end","separator","backgroundColor","GlobalSummary","state","globalConfirmed","globalRecovered","globaldeaths","lastUpdated","api","get","response","console","log","data","confirmed","value","recovered","deaths","Date","lastUpdate","toLocaleDateString","toLocaleTimeString","recoverRatePercentage","Math","round","deathRatePercentage","this","setState","class","Component","App","sub","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAEe,SAASA,EAAIC,GAC1B,OACE,6BACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,kBAAkBD,EAAME,S,oECJhCC,E,OAAAA,EAAMC,OAAO,CAChBC,QAAS,mC,iBCAN,SAASC,EAAT,GAAuD,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,eAClD,OACE,yBAAKT,UAAS,kBACN,yBAAKA,UAAU,WACX,yBAAKA,UAAU,cAAcU,MAAO,CAACC,OAAQ,SACzC,yBAAKX,UAAU,2BACX,yBAAKA,UAAU,SAAQ,kBAAC,IAAD,CAASY,IAAKJ,EAAOK,UAAW,OACvD,yBAAKb,UAAU,SAASO,MAIpC,yBAAKP,UAAU,gBAAgBU,MAAO,CAACI,gBAAgB,GAAD,OAAKR,GAASK,OAAQ,SACxE,0BAAMX,UAAU,gBAAgBU,MAAO,CAACJ,MAAO,UAC1CG,KCZd,IAuDQM,EAvDf,4MAEEC,MAAQ,CACNC,gBAAkB,EAClBC,gBAAiB,EACjBC,aAAe,EACfC,YAAc,IANlB,8MAU2BC,EAAIC,IAAI,KAVnC,OAUUC,EAVV,OAWIC,QAAQC,IAAIF,EAASG,MACfT,EAAkBM,EAASG,KAAKC,UAAUC,MAC1CV,EAAkBK,EAASG,KAAKG,UAAUD,MAC1CT,EAAeI,EAASG,KAAKI,OAAOF,MACpCR,EAfV,UAe2B,IAAIW,KAAKR,EAASG,KAAKM,YAAYC,qBAf9D,YAesF,IAAIF,KAAKR,EAASG,KAAKM,YAAYE,sBAC/GC,EAhBV,UAgBqCC,KAAKC,MAAOnB,EAAkBD,EAAmB,KAhBtF,qBAiBUqB,EAjBV,UAiBmCF,KAAKC,MAAOlB,EAAeF,EAAmB,KAjBjF,oBAoBIsB,KAAKC,SAAS,CACZvB,kBACAC,kBACAC,eACAC,cACAe,wBACAG,wBA1BN,sIA8BY,IAAD,EAOHC,KAAKvB,MALPC,EAFK,EAELA,gBACAC,EAHK,EAGLA,gBACAC,EAJK,EAILA,aACAgB,EALK,EAKLA,sBACAG,EANK,EAMLA,oBAGF,OACE,yBAAKtC,UAAU,mCACb,wBAAIyC,MAAM,4BAAV,gBAEE,yBAAKA,MAAM,cAAX,mBAAyCF,KAAKvB,MAAMI,YAApD,MAEF,yBAAKpB,UAAU,kBACP,kBAACK,EAAD,CAAOC,MAAM,SAASC,SAAS,YAAYC,MAAOS,EAAiBR,eAAkB,KACrF,kBAACJ,EAAD,CAAOC,MAAM,QAAQC,SAAS,YAAYC,MAAOU,EAAiBT,eAAkB0B,IACpF,kBAAC9B,EAAD,CAAOC,MAAM,MAAMC,SAAS,SAASC,MAAOW,EAAcV,eAAkB6B,UAhD5F,GAAmCI,aCepBC,MAff,WAIE,OACE,oCACE,kBAAC7C,EAAD,CAAKG,MALe,mBAKS2C,IAJP,WAKtB,yBAAKlC,MAAO,CAACmC,QAAQ,SACnB,kBAAC,EAAD,S,MCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.3bcf8b77.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Nav(props) {\r\n  return (\r\n    <nav>\r\n      <div className='nav-title'>\r\n        <div className='nav-title-main'>{props.title}</div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n            baseURL: 'https://covid19.mathdro.id/api'\r\n});","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nexport default function Cards({color,category,count,ratePercentage}) {\r\n  return (\r\n    <div className={`ui raised card`}>\r\n            <div className=\"content\">\r\n                <div className=\"description\" style={{height: '80px'}}>\r\n                    <div className=\"ui horizontal statistic\">\r\n                        <div className=\"value\"><CountUp end={count} separator =\",\"/></div>\r\n                        <div className=\"label\">{category}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"extra content\" style={{backgroundColor: `${color}`, height: '40px'}}>\r\n                <span className=\"right floated\" style={{color: 'white'}}>\r\n                    {ratePercentage}\r\n                </span>\r\n            </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport api from '../../apis/covid19.api';\r\nimport Cards from '../UI/Cards';\r\n\r\nexport class GlobalSummary extends Component {\r\n\r\n  state = {\r\n    globalConfirmed : 0,\r\n    globalRecovered: 0,\r\n    globaldeaths : 0,\r\n    lastUpdated : '',\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const response = await api.get('/');\r\n    console.log(response.data);\r\n    const globalConfirmed = response.data.confirmed.value;\r\n    const globalRecovered = response.data.recovered.value;\r\n    const globaldeaths = response.data.deaths.value;\r\n    const lastUpdated = `${new Date(response.data.lastUpdate).toLocaleDateString()} ${new Date(response.data.lastUpdate).toLocaleTimeString()}`;\r\n    const recoverRatePercentage = `${Math.round((globalRecovered / globalConfirmed) * 100)} % Recoverey Rate`;\r\n    const deathRatePercentage = `${Math.round((globaldeaths / globalConfirmed) * 100)} % Fatality Rate`;\r\n\r\n\r\n    this.setState({\r\n      globalConfirmed,\r\n      globalRecovered,\r\n      globaldeaths,\r\n      lastUpdated,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      globalConfirmed,\r\n      globalRecovered,\r\n      globaldeaths,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"ui segment basic global-summary\">\r\n        <h2 class=\"ui center aligned header\">\r\n          Global Status\r\n          <div class=\"sub header\">Last updated on {this.state.lastUpdated}.</div>\r\n        </h2>\r\n        <div className=\"ui three cards\">\r\n                <Cards color=\"orange\" category=\"Confirmed\" count={globalConfirmed} ratePercentage = {\"\"}/>\r\n                <Cards color=\"olive\" category=\"Recovered\" count={globalRecovered} ratePercentage = {recoverRatePercentage}/>\r\n                <Cards color=\"red\" category=\"Deaths\" count={globaldeaths} ratePercentage = {deathRatePercentage}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GlobalSummary\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport GlobalSummary from './components/global-summary/GlobalSummary';\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n    <>\n      <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n      <div style={{padding:'10px'}}>\n        <GlobalSummary />\n      </div>\n    </>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}