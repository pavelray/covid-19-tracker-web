{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","apis/api.covid19api.js","apis/country.api.js","apis/covid19.api.js","resources/const.js","redux/actions/index.js","components/UI/Cards.js","components/global-summary/GlobalSummary.js","components/UI/Table.js","components/country-summary/CountrySummaryTable.js","components/country-summary/CountrySummary.js","components/global-summary/GlobalSummaryContainer.js","components/UI/CountryDDL.js","components/UI/CountryDetailsTable.js","components/country-details/CountryDetailsContainer.js","components/nav-bar/Footer.js","App.js","resources/helper.js","redux/reducer/globalDataReducer.js","redux/reducer/countriesDetailsReducer.js","redux/reducer/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","axios","create","baseURL","ACTION_TYPE","fetchGlobalData","dispatch","a","covid19Global","get","response","type","payload","data","fetchAllCountrySummary","covid19Api","fetchCountrySummary","selectedCountry","fetchCountryDetails","fetchAllCountries","minWidth","Cards","color","category","count","ratePercentage","Card","CardContent","gutterBottom","component","end","separator","GlobalSummary","renderGlobalContent","global","confirmed","recovered","deaths","recoverRatePercentage","deathRatePercentage","Grid","container","spacing","padding","item","xs","Box","textAlign","lastUpdated","Paper","this","Component","connect","state","bindActionCreators","Table","columns","options","CountrySummaryTable","search","CountrySummary","field","sorting","headerStyle","backgroundColor","renderCountrySummaryList","countries","console","log","GlobalSummaryContainer","renderPageLayout","marginTop","CountryDDL","Dropdown","placeholder","fluid","selection","values","value","onChange","event","result","CountryDetailsTable","CountryDetailsContainer","getCountrySummary","e","setState","renderCountrySummary","summary","details","length","Divider","Container","maxWidth","countryDetails","top","bottom","Footer","blue","href","Date","getFullYear","App","sub","minHeight","sortByProperty","property","b","INITIAL_STATE","combineReducers","action","lastUpdate","toLocaleDateString","toLocaleTimeString","Math","round","Countries","map","country","name","Country","code","CountryCode","slug","Slug","TotalConfirmed","TotalRecovered","TotalDeaths","percentage","Global","toFixed","sort","text","key","iso2","iso3","flag","toLowerCase","combinedKey","active","incidentRate","store","createStore","reducers","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77aa4c90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.covid19api.com'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/all'\r\n});","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n            baseURL: 'https://covid19.mathdro.id/api'\r\n});","\r\nexport const ACTION_TYPE = {\r\n    FETCH_GLOBAL_DATA : 'FETCH_GLOBAL_DATA',\r\n    FETCH_ALL_COUNTRIES_NAME: 'FETCH_ALL_COUNTRIES_NAME',\r\n    FETCH_COUNTRY_SUMMARY: 'FETCH_COUNTRY_SUMMARY',\r\n    FETCH_COUNTRY_DETAILS: 'FETCH_COUNTRY_DETAILS',\r\n    FETCH_ALL_COUNTRY_SUMMARY: 'FETCH_ALL_COUNTRY_SUMMARY'\r\n}","import country from \"../../apis/country.api\";\r\nimport covid19Api from '../../apis/api.covid19api';\r\nimport covid19Global from '../../apis/covid19.api';\r\nimport {ACTION_TYPE} from '../../resources/const'\r\n\r\nimport _ from 'lodash';\r\n\r\n\r\n// export const fetchGlobalData = () => async (dispatch, getState) => {\r\n//     await dispatch(fetchPost());\r\n\r\n//     const userIds = _.uniq(_.map(getState().posts,'userId'));\r\n//     userIds.forEach(id=> dispatch(fetchUser(id)));\r\n// }\r\n\r\nexport const fetchGlobalData = () => async dispatch =>{\r\n    const response = await covid19Global.get('/');\r\n    dispatch({type:ACTION_TYPE.FETCH_GLOBAL_DATA, payload: response.data});\r\n}\r\n\r\nexport const fetchAllCountrySummary = () => async dispatch => {\r\n    const response = await covid19Api.get('/summary');\r\n    dispatch({\r\n        type: ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY,\r\n        payload: response.data\r\n    });\r\n}\r\n\r\nexport const fetchCountrySummary = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_SUMMARY, payload: response.data});\r\n}\r\n\r\nexport const fetchCountryDetails = (selectedCountry) => async dispatch =>{\r\n    const response = await covid19Global.get(`/countries/${selectedCountry}/confirmed`);\r\n    dispatch({type:ACTION_TYPE.FETCH_COUNTRY_DETAILS, payload: response.data});\r\n}\r\n\r\nexport const fetchAllCountries = () => async dispatch =>{\r\n    const response = await covid19Global.get('/countries');\r\n    dispatch({type:ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME, payload: response.data});\r\n}\r\n\r\n","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 200,\r\n  },\r\n});\r\n\r\n\r\nexport default function Cards({color,category,count,ratePercentage}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    <CountUp end={count} separator =\",\"/>\r\n                </Typography>\r\n                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                    {category}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardContent className={color}>\r\n                <Typography variant=\"subtitle2\">\r\n                    {ratePercentage}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport {fetchGlobalData} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Cards from '../UI/Cards';\r\n\r\nexport class GlobalSummary extends Component {\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchGlobalData()\r\n  }\r\n\r\n  renderGlobalContent = () =>{\r\n    const {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    } = this.props.global;\r\n\r\n    return(\r\n      <>\r\n        <Grid container spacing={3} style={{padding: '20px'}}>\r\n            <Grid item xs={12}>\r\n              <Box style={{textAlign:'center'}}>\r\n                <Typography variant=\"h5\" gutterBottom >\r\n                  Global Status\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Last updated on {this.props.global.lastUpdated}.\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={confirmed?confirmed:0} ratePercentage = {\"\"}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"olive-card-footer\" category=\"Recovered\" count={recovered?recovered:0} ratePercentage = {recoverRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"red-card-footer\" category=\"Deaths\" count={deaths?deaths:0} ratePercentage = {deathRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n        {\r\n          this.renderGlobalContent()\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n  return {\r\n    global : {...state.global}\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n  fetchGlobalData\r\n},dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GlobalSummary)\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function Table(props) {\r\n  return (\r\n    <MaterialTable\r\n      title={props.title}\r\n      columns={props.columns}\r\n      data={props.data}\r\n      options={props.options}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Table from '../UI/Table'\r\n\r\nexport default function CountrySummaryTable(props) {\r\nconst options = {\r\n  search: true\r\n}\r\n\r\n return(\r\n     <Table data={props.data} columns={props.columns} title={props.title} options={options} />\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport CountrySummaryTable from './CountrySummaryTable'\r\nimport {fetchAllCountrySummary} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nexport class CountrySummary extends Component {\r\n\r\n    columns = [\r\n        {\r\n            title: 'Name',\r\n            field: 'name',\r\n            sorting: false,\r\n            headerStyle: {\r\n                backgroundColor: '#3f51b5',\r\n            }\r\n           \r\n        },\r\n        {\r\n            title: 'Confirmed',\r\n            field: 'confirmed',\r\n            type: 'numeric',\r\n            headerStyle: {\r\n                backgroundColor: '#3f51b5',\r\n            }\r\n        },\r\n        {\r\n            title: 'Recovered',\r\n            field: 'recovered',\r\n            type: 'numeric',\r\n            headerStyle: {\r\n                backgroundColor: '#3f51b5',\r\n            }\r\n        },\r\n        {\r\n            title: 'Death',\r\n            field: 'deaths',\r\n            type: 'numeric',\r\n            headerStyle: {\r\n                backgroundColor: '#3f51b5',\r\n            }\r\n        },\r\n        {\r\n            title: 'Global Ratio',\r\n            field: 'percentage',\r\n            sorting: false,\r\n            headerStyle: {\r\n                backgroundColor: '#3f51b5',\r\n            }\r\n        },\r\n    ]\r\n\r\n\r\n    componentDidMount(){\r\n        this.props.fetchAllCountrySummary()\r\n    }\r\n\r\n    renderCountrySummaryList = ()=>{\r\n\r\n        return(\r\n            <>\r\n                <CountrySummaryTable columns={this.columns} data={this.props.countries} title='Country Wise Stats'/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <>\r\n            {this.renderCountrySummaryList()}\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        countries: state.global.countries\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\r\n    fetchAllCountrySummary\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountrySummary)\r\n","import React, { Component } from 'react';\r\nimport GlobalSummary from './GlobalSummary';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Cards from '../UI/Cards';\r\nimport CountrySummary from '../country-summary/CountrySummary';\r\n\r\nexport class GlobalSummaryContainer extends Component {\r\n    \r\n    renderPageLayout = () =>{\r\n        return(\r\n            <>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                    <Paper style={{marginTop:'12px'}}>\r\n                        <GlobalSummary/>\r\n                    </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                    <Paper>\r\n                        <CountrySummary/>\r\n                    </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    render() {\r\n        return (\r\n        <>\r\n            {\r\n                this.renderPageLayout()\r\n            }\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GlobalSummaryContainer\r\n","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nexport default function CountryDDL(props) {\r\n   \r\n    const onChange = (event, result) => {\r\n        props.onChange(result.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <Dropdown\r\n            placeholder='Select Country'\r\n            fluid\r\n            search\r\n            selection\r\n            options={props.values}\r\n            value={props.selectedCountry}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function CountryDetailsTable(props) {\r\n  return (\r\n    <MaterialTable\r\n      title=\"Area wise details\"\r\n      columns={props.columns}\r\n      data={props.data}\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport api from '../../apis/country.api';\r\nimport covidApi from '../../apis/covid19.api';\r\nimport CountryDDL from '../UI/CountryDDL';\r\nimport Cards from '../UI/Cards';\r\nimport CountryDetailsTable from '../UI/CountryDetailsTable';\r\nimport {fetchAllCountries,fetchCountrySummary,fetchCountryDetails} from '../../redux/actions';\r\n\r\nimport {connect} from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nexport class CountryDetailsContainer extends Component {\r\n\r\n    state = {\r\n        selectedCountry: 'IND',\r\n    }\r\n\r\n    columns = [\r\n        { title: 'Area', field: 'combinedKey' },\r\n        { title: 'Confirmed', field: 'confirmed',type: 'numeric' },\r\n        { title: 'Active', field: 'active', type: 'numeric' },\r\n        { title: 'Death', field: 'deaths', type: 'numeric' },\r\n        { title: 'Incident Rate', field: 'incidentRate'},\r\n        { \r\n          title: 'Last Updated', field: 'lastUpdate' \r\n        }\r\n    ]\r\n        \r\n    \r\n\r\n    async componentDidMount(){\r\n        this.props.fetchAllCountries();\r\n        this.getCountrySummary(this.state.selectedCountry);\r\n    }\r\n    \r\n    getCountrySummary = async (selectedCountry) => {\r\n\r\n        this.props.fetchCountrySummary(selectedCountry);\r\n        this.props.fetchCountryDetails(selectedCountry);\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({selectedCountry:e});\r\n        this.getCountrySummary(e);\r\n    }\r\n\r\n    renderCountrySummary = () =>{\r\n        const {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            recoverRatePercentage,\r\n            deathRatePercentage\r\n        } = this.props.summary;\r\n\r\n        if(this.props.summary){\r\n            return(\r\n                <>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={confirmed?confirmed:0} ratePercentage = {\"\"}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"olive-card-footer\" category=\"Recovered\" count={recovered?recovered:0} ratePercentage = {recoverRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"red-card-footer\" category=\"Deaths\" count={deaths?deaths:0} ratePercentage = {deathRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <CountryDetailsTable columns={this.columns} data={this.props.details} />\r\n                    </Grid>\r\n                </Grid>\r\n                </>\r\n            )\r\n        }else{\r\n            return(\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper style={{padding: '20px'}}>\r\n                           <Typography variant=\"h6\">\r\n                               No data found for the selected country. \r\n                           </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if(this.props.countries && this.props.countries.length > 0){\r\n            return (\r\n                <div style={{marginTop: '25px'}}>\r\n                    <Divider variant=\"middle\" />\r\n                    <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n                        <Grid item xs={12}>\r\n                            <Box style={{textAlign:'center'}}>\r\n                                <Typography variant=\"h5\" gutterBottom >\r\n                                    Country Wise Details\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\" gutterBottom>\r\n                                    Last updated on {this.props.summary.lastUpdated}.\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <CountryDDL values={this.props.countries} onChange={this.onChange} selectedCountry={this.state.selectedCountry}/>\r\n                    </Container>\r\n                    {\r\n                        this.renderCountrySummary()\r\n                    }\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        countries : state.countryDetails.countries,\r\n        summary: state.countryDetails.summary,\r\n        details: state.countryDetails.details\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) =>  bindActionCreators({\r\n    fetchAllCountries,\r\n    fetchCountrySummary,\r\n    fetchCountryDetails\r\n  },dispatch);\r\n  \r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CountryDetailsContainer)\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n     top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n  const color = blue[500];\r\n  return (\r\n   \r\n      <AppBar position=\"static\" className={classes.root} style={{backgroundColor: color , color: 'black'}}>\r\n        <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n            <Grid item xs={12}>\r\n                <Box style={{textAlign:'center'}}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom >\r\n                        Developed By <a href=\"https://github.com/pavelray\" style={{color: 'white'}}>#Ray</a> with <sub><FavoriteIcon /></sub> from India\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                       API Used - <a href=\"https://github.com/mathdroid/covid-19-api\" style={{color: 'white'}}>https://github.com/mathdroid/covid-19-api</a>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <CopyrightIcon/><sup>{new Date().getFullYear()}</sup> \r\n                    </Typography>\r\n                    \r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n      </AppBar>\r\n  )\r\n}\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport GlobalSummaryContainer from './components/global-summary/GlobalSummaryContainer';\nimport CountryDetailsContainer from './components/country-details/CountryDetailsContainer';\nimport Footer from './components/nav-bar/Footer';\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n    <>\n      <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n      <div style={{padding:'10px', minHeight: '90vh'}}>\n        <GlobalSummaryContainer />\n        {/* <CountryDetailsContainer /> */}\n      </div>\n      <Footer />\n    </>\n  );\n\n}\n\nexport default App;\n","export function sortByProperty(property) {\r\n    return function (a, b) {\r\n        if (a[property] > b[property])\r\n            return -1;\r\n        else if (a[property] < b[property])\r\n            return 1;\r\n\r\n        return 0;\r\n    }\r\n}","import {ACTION_TYPE} from '../../resources/const';\r\nimport {sortByProperty} from '../../resources/helper';\r\n\r\nconst INITIAL_STATE = {\r\n    countries : [],\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type){\r\n        case ACTION_TYPE.FETCH_GLOBAL_DATA:\r\n\r\n            const confirmed = action.payload.confirmed.value;\r\n            const recovered = action.payload.recovered.value;\r\n            const deaths = action.payload.deaths.value;\r\n            const lastUpdated = `${new Date(action.payload.lastUpdate).toLocaleDateString()} ${new Date(action.payload.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n\r\n            return {\r\n                confirmed,\r\n                recovered,\r\n                deaths,\r\n                lastUpdated,\r\n                recoverRatePercentage,\r\n                deathRatePercentage,\r\n                ...state\r\n            };\r\n\r\n        // eslint-disable-next-line no-duplicate-case\r\n        case ACTION_TYPE.FETCH_ALL_COUNTRY_SUMMARY:\r\n\r\n            const countries = action.payload.Countries.map((country) => {\r\n                return{\r\n                        name: country.Country,\r\n                        code: country.CountryCode,\r\n                        slug: country.Slug,\r\n                        confirmed:  country.TotalConfirmed,\r\n                        recovered: country.TotalRecovered,\r\n                        deaths: country.TotalDeaths,\r\n                        percentage: `${((country.TotalConfirmed / action.payload.Global.TotalConfirmed) * 100).toFixed(2)} %`\r\n                    }\r\n            });\r\n            \r\n            state.countries = countries.sort(sortByProperty('confirmed'));\r\n            \r\n        return {...state};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {ACTION_TYPE} from '../../resources/const';\r\n\r\nconst INITIAL_STATE = {\r\n    countries: [],\r\n    summary: {},\r\n    details: []\r\n}\r\n\r\nexport default (state=INITIAL_STATE ,action)=>{\r\n    switch (action.type){\r\n        case ACTION_TYPE.FETCH_ALL_COUNTRIES_NAME:\r\n            const data = action.payload;\r\n            const countries =  data.countries.map((country)=>{\r\n                return {\r\n                    text: country.name,\r\n                    key: country.iso2,\r\n                    value: country.iso3,\r\n                    flag: country.iso2 ? country.iso2.toLowerCase() : ''\r\n                }\r\n            });\r\n\r\n            state.countries=[...countries]\r\n            \r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_SUMMARY:\r\n            const confirmed = action.payload.confirmed.value;\r\n            const recovered = action.payload.recovered.value;\r\n            const deaths = action.payload.deaths.value;\r\n            const lastUpdated = `${new Date(action.payload.lastUpdate).toLocaleDateString()} ${new Date(action.payload.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n\r\n            state.summary ={\r\n                    confirmed,\r\n                    recovered,\r\n                    deaths,\r\n                    lastUpdated,\r\n                    recoverRatePercentage,\r\n                    deathRatePercentage\r\n                }\r\n            return {...state};\r\n\r\n        case ACTION_TYPE.FETCH_COUNTRY_DETAILS:\r\n            const details =  action.payload.map((country)=>{\r\n                return {\r\n                    combinedKey: country.combinedKey,\r\n                    confirmed: country.confirmed,\r\n                    active: country.active,\r\n                    deaths: country.deaths,\r\n                    incidentRate: country.incidentRate ? country.incidentRate.toFixed(2) : 0,\r\n                    lastUpdate: new Date(country.lastUpdate).toLocaleDateString()\r\n                }\r\n            });\r\n\r\n            state.details = details;\r\n\r\n            return {...state};\r\n        default:\r\n            return {...state};\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport globalReducer from './globalDataReducer';\r\nimport countriesDetailsReducer from './countriesDetailsReducer';\r\n\r\nexport default combineReducers({\r\n    global: globalReducer ,\r\n    countryDetails : countriesDetailsReducer   \r\n});","import {createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux'\r\n\r\nimport './styles/index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}