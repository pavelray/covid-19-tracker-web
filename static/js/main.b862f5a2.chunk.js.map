{"version":3,"sources":["images/covid-virus-logo.png","components/nav-bar/Nav.js","apis/covid19.api.js","components/UI/Cards.js","components/global-summary/GlobalSummary.js","apis/country.api.js","components/UI/CountryDDL.js","components/UI/CountryDetailsTable.js","components/country-details/CountryDetailsContainer.js","components/nav-bar/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","fontFamily","Nav","props","classes","className","AppBar","position","Toolbar","src","logo","alt","width","height","Typography","variant","style","marginLeft","axios","create","baseURL","minWidth","Cards","color","category","count","ratePercentage","Card","CardContent","gutterBottom","component","end","separator","GlobalSummary","state","globalConfirmed","globalRecovered","globaldeaths","lastUpdated","api","get","response","data","confirmed","value","recovered","deaths","Date","lastUpdate","toLocaleDateString","toLocaleTimeString","recoverRatePercentage","Math","round","deathRatePercentage","this","setState","Grid","container","spacing","padding","item","xs","Box","textAlign","Paper","Component","CountryDDL","Dropdown","placeholder","fluid","search","selection","options","values","selectedCountry","onChange","event","result","CountryDetailsTable","columns","CountryDetailsContainer","countries","countryStautusSummary","countryDetails","noDataFound","field","type","getCountrySummary","a","covidApi","then","res","filtertedData","map","combinedKey","active","incidentRate","toFixed","catch","e","renderCountrySummary","country","text","name","key","alpha2Code","toLowerCase","alpha3Code","image","flag","size","length","marginTop","Divider","Container","maxWidth","top","bottom","Footer","blue","backgroundColor","href","getFullYear","App","sub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.b862f5a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-virus-logo.8193ad20.png\";","import React from 'react';\r\nimport logo from '../../images/covid-virus-logo.png'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Nav(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" >\r\n        <Toolbar>\r\n          <img src={logo} alt='Logo' width=\"50\" height=\"50\"/>\r\n          <Typography variant=\"h6\" className={classes.title} style={{marginLeft: '15px'}}>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n            baseURL: 'https://cors-anywhere.herokuapp.com/https://covid19.mathdro.id/api'\r\n});","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 200,\r\n  },\r\n});\r\n\r\n\r\nexport default function Cards({color,category,count,ratePercentage}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    <CountUp end={count} separator =\",\"/>\r\n                </Typography>\r\n                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                    {category}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardContent className={color}>\r\n                <Typography variant=\"subtitle2\">\r\n                    {ratePercentage}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport api from '../../apis/covid19.api';\r\nimport Cards from '../UI/Cards';\r\n\r\nexport class GlobalSummary extends Component {\r\n\r\n  state = {\r\n    globalConfirmed : 0,\r\n    globalRecovered: 0,\r\n    globaldeaths : 0,\r\n    lastUpdated : '',\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const response = await api.get('/');\r\n    //console.log(response.data);\r\n    const globalConfirmed = response.data.confirmed.value;\r\n    const globalRecovered = response.data.recovered.value;\r\n    const globaldeaths = response.data.deaths.value;\r\n    const lastUpdated = `${new Date(response.data.lastUpdate).toLocaleDateString()} ${new Date(response.data.lastUpdate).toLocaleTimeString()}`;\r\n    const recoverRatePercentage = `${Math.round((globalRecovered / globalConfirmed) * 100)} % Recoverey Rate`;\r\n    const deathRatePercentage = `${Math.round((globaldeaths / globalConfirmed) * 100)} % Fatality Rate`;\r\n\r\n\r\n    this.setState({\r\n      globalConfirmed,\r\n      globalRecovered,\r\n      globaldeaths,\r\n      lastUpdated,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      globalConfirmed,\r\n      globalRecovered,\r\n      globaldeaths,\r\n      recoverRatePercentage,\r\n      deathRatePercentage\r\n    } = this.state;\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Grid container spacing={3} style={{padding: '20px'}}>\r\n            <Grid item xs={12}>\r\n              <Box style={{textAlign:'center'}}>\r\n                <Typography variant=\"h5\" gutterBottom >\r\n                  Global Status\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  Last updated on {this.state.lastUpdated}.\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={globalConfirmed} ratePercentage = {\"\"}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"olive-card-footer\" category=\"Recovered\" count={globalRecovered} ratePercentage = {recoverRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Paper>\r\n                <Cards color=\"red-card-footer\" category=\"Deaths\" count={globaldeaths} ratePercentage = {deathRatePercentage}/>\r\n              </Paper>\r\n            </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GlobalSummary\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/all'\r\n});","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\nexport default function CountryDDL(props) {\r\n   \r\n    const onChange = (event, result) => {\r\n        props.onChange(result.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <Dropdown\r\n            placeholder='Select Country'\r\n            fluid\r\n            search\r\n            selection\r\n            options={props.values}\r\n            value={props.selectedCountry}\r\n            onChange={onChange}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport default function CountryDetailsTable(props) {\r\n  return (\r\n    <MaterialTable\r\n      title=\"Area wise details\"\r\n      columns={props.columns}\r\n      data={props.data}\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport api from '../../apis/country.api';\r\nimport covidApi from '../../apis/covid19.api';\r\nimport CountryDDL from '../UI/CountryDDL';\r\nimport Cards from '../UI/Cards';\r\nimport CountryDetailsTable from '../UI/CountryDetailsTable';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nexport class CountryDetailsContainer extends Component {\r\n\r\n    state = {\r\n        countries: [],\r\n        countryStautusSummary: {\r\n            confirmed: 0,\r\n            recovered: 0,\r\n            deaths: 0,\r\n            lastUpdated: '',\r\n            \r\n        },\r\n        countryDetails : [],\r\n        selectedCountry: 'ind',\r\n        noDataFound: false\r\n    }\r\n\r\n    columns = [\r\n        { title: 'Area', field: 'combinedKey' },\r\n        { title: 'Confirmed', field: 'confirmed',type: 'numeric' },\r\n        { title: 'Active', field: 'active', type: 'numeric' },\r\n        { title: 'Death', field: 'deaths', type: 'numeric' },\r\n        { title: 'Incident Rate', field: 'incidentRate'},\r\n        { \r\n          title: 'Last Updated', field: 'lastUpdate' \r\n        }\r\n    ]\r\n        \r\n    \r\n\r\n    async componentDidMount(){\r\n        const response = await api.get('/');\r\n        const data = response.data;\r\n        const countries =  data.map((country)=>{\r\n            return {\r\n                text: country.name,\r\n                key: country.alpha2Code.toLowerCase(),\r\n                value: country.alpha3Code.toLowerCase(),\r\n                image: {\r\n                    src: country.flag,\r\n                    size:'mini'\r\n                }\r\n            }\r\n        });\r\n\r\n        this.getCountrySummary(this.state.selectedCountry);\r\n        this.setState({countries})\r\n        \r\n    }\r\n    \r\n    getCountrySummary = async (selectedCountry) => {\r\n        covidApi.get(`/countries/${selectedCountry}`)\r\n        .then(response => {\r\n            const confirmed = response.data.confirmed.value;\r\n            const recovered = response.data.recovered.value;\r\n            const deaths = response.data.deaths.value;\r\n            const lastUpdated = `${new Date(response.data.lastUpdate).toLocaleDateString()} ${new Date(response.data.lastUpdate).toLocaleTimeString()}`;\r\n            const recoverRatePercentage = `${Math.round((recovered / confirmed) * 100)} % Recoverey Rate`;\r\n            const deathRatePercentage = `${Math.round((deaths / confirmed) * 100)} % Fatality Rate`;\r\n            //console.log(response, lastUpdated);\r\n            \r\n            this.setState({\r\n                countryStautusSummary: {\r\n                    confirmed,\r\n                    recovered,\r\n                    deaths,\r\n                    recoverRatePercentage,\r\n                    deathRatePercentage\r\n                },\r\n                lastUpdated,\r\n                noDataFound: false\r\n            });\r\n\r\n            covidApi.get(`/countries/${selectedCountry}/confirmed`).then(res=>{\r\n                \r\n                const filtertedData = res.data.map((item)=>{\r\n                        return {\r\n                            combinedKey: item.combinedKey,\r\n                            confirmed: item.confirmed,\r\n                            active: item.active,\r\n                            deaths: item.deaths,\r\n                            incidentRate: item.incidentRate ? item.incidentRate.toFixed(2) : 0,\r\n                            lastUpdate: new Date(item.lastUpdate).toLocaleDateString()\r\n\r\n                        }\r\n                });\r\n                //console.log(filtertedData);\r\n\r\n                this.setState({\r\n                    countryDetails: filtertedData\r\n                });\r\n            });\r\n\r\n        }).catch((e)=>{\r\n                this.setState({\r\n                noDataFound: true\r\n            });             \r\n        });\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        //console.log(e)\r\n        this.setState({selectedCountry:e});\r\n        this.getCountrySummary(e);\r\n    }\r\n\r\n    renderCountrySummary = () =>{\r\n        const {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            recoverRatePercentage,\r\n            deathRatePercentage\r\n        } = this.state.countryStautusSummary;\r\n\r\n        if(!this.state.noDataFound){\r\n            return(\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"orange-card-footer\" category=\"Confirmed\" count={confirmed} ratePercentage = {\"\"}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"olive-card-footer\" category=\"Recovered\" count={recovered} ratePercentage = {recoverRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper>\r\n                            <Cards color=\"red-card-footer\" category=\"Deaths\" count={deaths} ratePercentage = {deathRatePercentage}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }else{\r\n            return(\r\n                <Grid container spacing={3} style={{padding: '20px'}}>\r\n                    <Grid item xs>\r\n                        <Paper style={{padding: '20px'}}>\r\n                           <Typography variant=\"h6\">\r\n                               No data found for the selected country. \r\n                           </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n\r\n        if(this.state.countries.length > 0){\r\n            return (\r\n                <div style={{marginTop: '25px'}}>\r\n                    <Divider variant=\"middle\" />\r\n                    <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n                        <Grid item xs={12}>\r\n                            <Box style={{textAlign:'center'}}>\r\n                                <Typography variant=\"h5\" gutterBottom >\r\n                                    Country Wise Details\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\" gutterBottom>\r\n                                    Last updated on {this.state.lastUpdated}.\r\n                                </Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <CountryDDL values={this.state.countries} onChange={this.onChange} selectedCountry={this.state.selectedCountry}/>\r\n                    </Container>\r\n                    {\r\n                        this.renderCountrySummary()\r\n                    }\r\n                    <Grid container spacing={3} style={{padding: '20px'}}>\r\n                        <Grid item xs>\r\n                            <CountryDetailsTable columns={this.columns} data={this.state.countryDetails} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        }\r\n        return(<></>)\r\n    }\r\n}\r\n\r\nexport default CountryDetailsContainer\r\n","import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CopyrightIcon from '@material-ui/icons/Copyright';\r\nimport blue from '@material-ui/core/colors/blue';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n     top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: 'Baloo Paaji 2, cursive',\r\n  },\r\n}));\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n  const color = blue[500];\r\n  return (\r\n   \r\n      <AppBar position=\"static\" className={classes.root} style={{backgroundColor: color , color: 'black'}}>\r\n        <Container maxWidth = \"sm\" style={{padding: '20px'}} >\r\n            <Grid item xs={12}>\r\n                <Box style={{textAlign:'center'}}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom >\r\n                        Developed By <a href=\"https://github.com/pavelray\" style={{color: 'white'}}>#Ray</a> with <sub><FavoriteIcon /></sub> from India\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                       API Used - <a href=\"https://github.com/mathdroid/covid-19-api\" style={{color: 'white'}}>https://github.com/mathdroid/covid-19-api</a>\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                      <CopyrightIcon/><sup>{new Date().getFullYear()}</sup> \r\n                    </Typography>\r\n                    \r\n                </Box>\r\n            </Grid>\r\n        </Container>\r\n      </AppBar>\r\n  )\r\n}\r\n","import React from 'react';\nimport Nav from './components/nav-bar/Nav'\nimport GlobalSummary from './components/global-summary/GlobalSummary';\nimport CountryDetailsContainer from './components/country-details/CountryDetailsContainer';\nimport Footer from './components/nav-bar/Footer';\n\nfunction App() {\n  const appTitlePrimary = 'Covid-19 Tracker';\n  const appTitleSecondary = 'Global'\n  \n  return (\n    <>\n      <Nav title={appTitlePrimary} sub={appTitleSecondary} />\n      <div style={{padding:'10px'}}>\n        <GlobalSummary />\n        <CountryDetailsContainer />\n      </div>\n      <Footer />\n    </>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}